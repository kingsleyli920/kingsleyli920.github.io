{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","path":"libs/materialize/font/material-design-icons/LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","path":"libs/materialize/font/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.eot","path":"libs/materialize/font/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","path":"libs/materialize/font/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","path":"libs/materialize/font/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","path":"libs/materialize/font/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","path":"libs/materialize/font/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/js/materialize.min.js","path":"libs/materialize/js/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","path":"libs/materialize/font/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/css/materialize.min.css","path":"libs/materialize/css/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","path":"libs/materialize/font/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","path":"libs/materialize/font/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff","path":"libs/materialize/font/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","path":"libs/materialize/font/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","path":"libs/materialize/font/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","path":"libs/materialize/font/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","path":"libs/materialize/font/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","path":"libs/materialize/font/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","path":"libs/materialize/font/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","path":"libs/materialize/font/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","path":"libs/materialize/font/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","path":"libs/materialize/font/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","path":"libs/materialize/font/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.eot","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1550674547000},{"_id":"themes/matery/README_CN.md","hash":"a59bd7f914c41deee3aed87276309a0c755e76ac","modified":1550674547000},{"_id":"themes/matery/README.md","hash":"9a63ad948c0db34aa4789a82c8f843c8bd9f8fa5","modified":1550674547000},{"_id":"themes/matery/.DS_Store","hash":"6bc4346e05077a5139173aad38d970ef563da05a","modified":1574760987170},{"_id":"themes/matery/_config.yml","hash":"172903f51b5edff80911364d1a7c8333872e2c93","modified":1577961831157},{"_id":"themes/matery/languages/zh-CN.yml","hash":"978718ecafe858d5a2357e72e12daea3326c26fa","modified":1550674547000},{"_id":"themes/matery/languages/default.yml","hash":"9d8609d0213ca88c48b0a4dbcbc4ca2effdda1d7","modified":1550674547000},{"_id":"source/_posts/es6-summary-1.md","hash":"a0dccfd49d2e8d1aba3864a2c0a187517e13c383","modified":1580161624898},{"_id":"source/_posts/es6-summary-2.md","hash":"88b67bb126adcdb5947684193eaf6c7c04021623","modified":1580201275190},{"_id":"source/_posts/My-First-Blog-New-Beginning.md","hash":"5c764ada4c130edb68894bf10d8017ee14575484","modified":1574509615718},{"_id":"source/about/index.md","hash":"c329c42926dbf2c5aa7edaf2cf9a0b68e7f64d97","modified":1574301158082},{"_id":"themes/matery/layout/archive.ejs","hash":"c8459660e87a0a07a6e007a99a2303b142bb7744","modified":1550674547000},{"_id":"themes/matery/layout/category.ejs","hash":"95176564ea32e65ddc9fdbe9074332239d6a1305","modified":1550674547000},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1550674547000},{"_id":"themes/matery/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1550674547000},{"_id":"themes/matery/layout/about.ejs","hash":"ee639d0310867976b3e5fb9f92c215a17a433703","modified":1550674547000},{"_id":"themes/matery/layout/tag.ejs","hash":"ad1cc11ac2b99bd803276b28ae57340cdd5810c8","modified":1550674547000},{"_id":"themes/matery/layout/index.ejs","hash":"0332a899bb76cd974dd26c8847837ff3f69e4569","modified":1550674547000},{"_id":"themes/matery/layout/friends.ejs","hash":"89c47cf1eb2cf1feb8a8d06f4eb7c76b713f79c0","modified":1550674547000},{"_id":"themes/matery/layout/layout.ejs","hash":"bcc7b119496f0049862d3a53467aa7e5829219b0","modified":1550674547000},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1550674547000},{"_id":"source/categories/index.md","hash":"e0558ffbbe944a03110e93afb11009eaf91a375e","modified":1574242111815},{"_id":"themes/matery/source/.DS_Store","hash":"474646a3985155de46021b891c1bbf1d51b5ea76","modified":1574760987169},{"_id":"source/tags/index.md","hash":"f4ebec4f7d01110bb1ec4b41b8d0a59331934614","modified":1574327741339},{"_id":"source/contact/index.md","hash":"e670f522cfeec3a1ff188a21d3ef10863f1898c7","modified":1574300655053},{"_id":"source/friends/index.md","hash":"025112308bfc59ab8552c11b21ab38ba3f82bbc0","modified":1574300747021},{"_id":"themes/matery/source/favicon.png","hash":"f61a41bfbda9aa6a2c438d4d42545d58cb82b9af","modified":1574760844697},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"8efbaee6228b93c0d4cd5025ad9573f1d7f7b7b4","modified":1574761250342},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1550674547000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"6d5a9889176050a321127c415f92408fb990ef4e","modified":1574760654237},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"e8fa64db1c0210e3fac372637691f940d63a1ff4","modified":1550674547000},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1550674547000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1550674547000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"0abfb51dc80ad063fb2118bee28de6bb8d99ed4e","modified":1550674547000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1550674547000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"5ad8cc2b4077b26c58d5da94d631b62089fbab26","modified":1550674547000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"3956916f8fff21e619619c0c518bd05be39a2f4f","modified":1550674547000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"4a2dfc04ee0ee22ed2a097d04896143f7ef3b344","modified":1550674547000},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1550674547000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"f02c7f9654cfff38ae0a4814015820c2ab2ee526","modified":1550674547000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"202dfebd4ce1e2e647e0fcbf275b30820d16507c","modified":1550674547000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1550674547000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"b7320ccb822f9969c58401a0bc946a8a7a1fea9c","modified":1550674547000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"3f73f077b05b6bf41150b00f43870a41d3fa390f","modified":1550674547000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"13cc4efb0cf29dc9879041da74d6bc8bf2695010","modified":1550674547000},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1550674547000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"6c2edf50d695e8ae467a298a8da335720ff8262d","modified":1574391491436},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"c948aa82afc65f08f1c894b049d6899577536306","modified":1550674547000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"3f8f4e9d164115bf30b88d29c383c39d286b59c4","modified":1574391279667},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"90527186fc8ed906eb1f20b59bc7f86caab9087b","modified":1550674547000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1550674547000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1550674547000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1550674547000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1550674547000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1550674547000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"684450f0b42f89ab70370c5248b34e55b7adf6fc","modified":1550674547000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1550674547000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"bd0edf8dad95b2255890d59fb6d6ed6f2eab9c2f","modified":1550674547000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1550674547000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1550674547000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1550674547000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"cb7a0151cd20e90351e151c22bca9d4c3112f234","modified":1550674547000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1550674547000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1550674547000},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1550674547000},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1550674547000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1550674547000},{"_id":"themes/matery/source/css/matery.css","hash":"32db55037f7c17cc0f6790518ad35629512d3960","modified":1550674547000},{"_id":"themes/matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1550674547000},{"_id":"themes/matery/source/js/matery.js","hash":"3eedb26fa1295f463aee179d4945eb650a1f441c","modified":1550674547000},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"7b4042b8e15902725ad96404da65aed52a55ecbd","modified":1574239661255},{"_id":"themes/matery/source/medias/.DS_Store","hash":"341169c6b2b4df2d39300edc4687a5ef03783f8b","modified":1574761043592},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1550674547000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1550674547000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1550674547000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1550674547000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1550674547000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1550674547000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1550674547000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1550674547000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1550674547000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1550674547000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1550674547000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1550674547000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1550674547000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1550674547000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1550674547000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1550674547000},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1550674547000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1550674547000},{"_id":"themes/matery/source/medias/reward/.DS_Store","hash":"5daac027ca306217c7ed10df092cc82518944fb8","modified":1574326916844},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"2d1b9e1c03ed1c384adf6bea46090aa60cfaa80a","modified":1574327005778},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1550674547000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1550674547000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1550674547000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1550674547000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1550674547000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1550674547000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1550674547000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1550674547000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1550674547000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1550674547000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1550674547000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1550674547000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1550674547000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1550674547000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1550674547000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1550674547000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1550674547000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1550674547000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1550674547000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1550674547000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1550674547000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"39ae240aa24587e09bebdc9c454059fbf36f4d6c","modified":1574326989350},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1550674547000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"540e43aea993ada0c9b4b50ae5843494d8b7cc28","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1550674547000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1550674547000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1550674547000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1550674547000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1550674547000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1550674547000},{"_id":"themes/matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"757d54367f0df16a783769eec0ba974f42bd7dce","modified":1550674547000},{"_id":"themes/matery/source/medias/logo.png","hash":"805cbe1d4ff558a368e27f9891da96ae5ec7f40f","modified":1574766124000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1550674547000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1550674547000},{"_id":"public/search.xml","hash":"6d2089067c4383b20ebe1e6043e1a4a7dbfff915","modified":1580201298591},{"_id":"public/categories/index.html","hash":"638db4b4a86b2c22819d075ad31c2090fb6eb5b8","modified":1580201298591},{"_id":"public/about/index.html","hash":"88e321400e4ff3b0a3f8e36904ea02ede6f64bd8","modified":1580201298591},{"_id":"public/tags/index.html","hash":"61b643e7064bb425ed19f67e30ef1581feaa26c1","modified":1580201298591},{"_id":"public/contact/index.html","hash":"490760b14c314084f4d3e1a6344c10d385a9297d","modified":1580201298591},{"_id":"public/friends/index.html","hash":"6dea5c873af74694c3aa7cc1fa0ed11cea77c187","modified":1580201298591},{"_id":"public/2020/01/28/es6_summary_2/index.html","hash":"7cd3e01ed204051383a6c81646ddada9b7fba04e","modified":1580201298591},{"_id":"public/2020/01/01/es6_summary_1/index.html","hash":"65c7ef6966039ca3608df878fe86342a017aca9c","modified":1580201298591},{"_id":"public/2019/11/23/my_first_blog_new_beginning/index.html","hash":"a6460c840954b8f3357fc13a79a08d4ce8cb32c8","modified":1580201298591},{"_id":"public/archives/index.html","hash":"9a48b3abb03162ac856929c35411bafb26448f25","modified":1580201298591},{"_id":"public/archives/2019/index.html","hash":"8ef892b8555fba307d0f17b5cb66f79e2c60c3ab","modified":1580201298591},{"_id":"public/archives/2019/11/index.html","hash":"70b7b4961fb01e6420a891d45c39e2fbeacbfffb","modified":1580201298591},{"_id":"public/archives/2020/index.html","hash":"6805018a366bc56bf282aaa39fe56f6d5f18262c","modified":1580201298591},{"_id":"public/archives/2020/01/index.html","hash":"440dbbd0de0d4c3831ec061dc3116287af04d226","modified":1580201298591},{"_id":"public/index.html","hash":"ebd0a03ae99ee7b6d533154f2da28d280f7b1feb","modified":1580201298591},{"_id":"public/categories/Front-end/index.html","hash":"d8544be6d508b125261e85fe6ce4dcc3bbf7ad27","modified":1580201298591},{"_id":"public/categories/Some-Feelings/index.html","hash":"4d0cd79534611ca9bcfc57519698d2780d0ef076","modified":1580201298591},{"_id":"public/tags/JavaScript/index.html","hash":"c951f2b860cd01b4b9ba7132e22e19a0bfb02af7","modified":1580201298591},{"_id":"public/tags/ECMAScript-6/index.html","hash":"d9d48984a57da942fbdde4bc8eeb6cb0388800ac","modified":1580201298591},{"_id":"public/tags/Front-End-Development/index.html","hash":"943297d8d24475bac94f538f0975f8a9e03c8dce","modified":1580201298591},{"_id":"public/tags/Web-Development/index.html","hash":"57157e4c638a7ccf826cc8a7a307af1c66d82119","modified":1580201298591},{"_id":"public/tags/Trival-Talks/index.html","hash":"5b0908095206725cea2b7dd4ab47eff6d1eb826f","modified":1580201298591},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1580201298591},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1580201298591},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1580201298591},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1580201298591},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1580201298591},{"_id":"public/medias/reward/wechat.png","hash":"2d1b9e1c03ed1c384adf6bea46090aa60cfaa80a","modified":1580201298591},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1580201298591},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1580201298591},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1580201298591},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1580201298591},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1580201298591},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1580201298591},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1580201298591},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1580201298591},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1580201298591},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1580201298591},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1580201298591},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1580201298591},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1580201298591},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1580201298591},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1580201298591},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1580201298591},{"_id":"public/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"540e43aea993ada0c9b4b50ae5843494d8b7cc28","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1580201298591},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1580201298591},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1580201298591},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1580201298591},{"_id":"public/favicon.png","hash":"f61a41bfbda9aa6a2c438d4d42545d58cb82b9af","modified":1580201298591},{"_id":"public/medias/avatar.jpg","hash":"7b4042b8e15902725ad96404da65aed52a55ecbd","modified":1580201298591},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1580201298591},{"_id":"public/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1580201298591},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1580201298591},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1580201298591},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1580201298591},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1580201298591},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1580201298591},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1580201298591},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1580201298591},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1580201298591},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1580201298591},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1580201298591},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1580201298591},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1580201298591},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1580201298591},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1580201298591},{"_id":"public/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1580201298591},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1580201298591},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1580201298591},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1580201298591},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1580201298591},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1580201298591},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1580201298591},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1580201298591},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1580201298591},{"_id":"public/js/matery.js","hash":"3eedb26fa1295f463aee179d4945eb650a1f441c","modified":1580201298591},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1580201298591},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1580201298591},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1580201298591},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1580201298591},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1580201298591},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1580201298591},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1580201298591},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1580201298591},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1580201298591},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1580201298591},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1580201298591},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1580201298591},{"_id":"public/css/matery.css","hash":"32db55037f7c17cc0f6790518ad35629512d3960","modified":1580201298591},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1580201298591},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1580201298591},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1580201298591},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1580201298591},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1580201298591},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1580201298591},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1580201298591},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1580201298591},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1580201298591},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1580201298591},{"_id":"public/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1580201298591},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1580201298591},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1580201298591},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1580201298591},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1580201298591},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1580201298591},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1580201298591},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1580201298591},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1580201298591},{"_id":"public/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1580201298591},{"_id":"public/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1580201298591},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1580201298591},{"_id":"public/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1580201298591},{"_id":"public/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1580201298591},{"_id":"public/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1580201298591},{"_id":"public/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1580201298591},{"_id":"public/medias/reward/alipay.jpg","hash":"39ae240aa24587e09bebdc9c454059fbf36f4d6c","modified":1580201298591},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1580201298591},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1580201298591},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1580201298591},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1580201298591},{"_id":"public/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1580201298591},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"757d54367f0df16a783769eec0ba974f42bd7dce","modified":1580201298591},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1580201298591},{"_id":"public/medias/logo.png","hash":"805cbe1d4ff558a368e27f9891da96ae5ec7f40f","modified":1580201298591}],"Category":[{"name":"Front-end","_id":"ck5xn1y370004ynaa2yyug2n6"},{"name":"Some Feelings","_id":"ck5xn1y3k000bynaabxpzfobm"}],"Data":[],"Page":[{"title":"about","date":"2019-11-21T01:52:02.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-11-20 17:52:02\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-11-21T01:52:38.082Z","path":"about/index.html","comments":1,"_id":"ck5xn1y320001ynaafc598irv","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-11-20T09:27:53.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-11-20 01:27:53\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-11-20T09:28:31.815Z","path":"categories/index.html","comments":1,"_id":"ck5xn1y360003ynaa96t8a0ri","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-11-21T01:19:44.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-11-20 17:19:44\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-11-21T09:15:41.339Z","path":"tags/index.html","comments":1,"_id":"ck5xn1y3c0007ynaa9iut38oc","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2019-11-21T01:22:54.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-11-20 17:22:54\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2019-11-21T01:44:15.053Z","path":"contact/index.html","comments":1,"_id":"ck5xn1y3d0008ynaa6cxza1yu","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2019-11-21T01:45:10.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-11-20 17:45:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-11-21T01:45:47.021Z","path":"friends/index.html","comments":1,"_id":"ck5xn1y45000vynaa3gi46mf7","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"es6_summary_1","date":"2020-01-02T03:05:38.000Z","comments":1,"img":"https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/blog-cover-imgs/frontend-js-article1.jpeg","_content":"<center> <h1>ES6 Summary #1</h1> </center>\n<center> <h2> <font color = lightgray>Let, Const and Var</font> </h2> </center>\n\n<font size = 3>\n\n## Preface\n\nI have learned and got in touch with Front End Development for several years. Most experiences from university and internship. But I don't have too many industrial level experiences. Speaking of Front End Development, I should talk about the history of Front End. From the simplest UI-like work, till now, various Front End Frameworks have emerged in endlessly, and Front End Development has also changed from insignificant to become as important as back-end now in web development. Also due to the development of Web Front End technology in recent years, IOS and Android technologies have been squeezed and gradually been merged into the Front End Development in some company. This makes the importance of Front End of Web development faintly surpasses the importance of Back End Development.\n\nThe above is my personal understanding of the changes in the Front End. Excluding Android and IOS, Front End technology, no matter what framework or library you use, JavaScript is always the foundation and the most important part. JavaScript is mainly composed of ECMAScript (core), DOM (Document Object Model) and BOM (Browser Object Model).\n\nES6 (ECMAScript 6) was launched in 2015, and it has been launched for a few years. With the development in recent years, many new features have been added. Although there are a few versions later than ES6, like ES2017 and ES2019, it seems that the penetration rate is not as high as ES6, and the compatibility is even less. Having said that, ES6 guarantees a certain degree of backward compatibility. I will summarize some new basic knowledge points of ES6 later, including new keywords, new concepts, etc.\n\n## Compatibility of ES6\n\nFirst let's talk about the compatibility of ES6. ES6 supports most of the latest versions of browsers, including Edge, Firefox 68+, Chrome 78+, Opera65 +, Safari 12.1+ and other desktop browsers. The support rate is almost 100%. Mobile browsers, including IOS12 +, Samsung 9+, OperaMobile 54+ are also close to 100% compatible. As for IE, it is basically not supported, but you can convert ES6 code to ES5 code.\n\n### Compatibility of ES6 with IE (and other browsers)\n\n1. Compatible with basic syntax (excluding promises and some classes)\n\nBefore importing other scripts, import browser.min.js and set the type of the script tag to text / babel\n\n2. If using new features like Promise\n\nBabel compiles and converts JavaScript statements by default, and cannot convert new APIs. But Polyfill technology can be used. Import browser-polyfill to the development page:\n\n\t<script type=\"text/javascript\" src=\"你的browser-polyfill路径\"></script>\n\n## The use of \"let\", \"const\" and the difference with \"var\"\n\nLet and const are new keywords in ES6. They have the same effect as var and are used to declare variables. But there are also many differences between them. If you need to consider more compatibility, it is better to use var. Let's talk about their uses and differences.\n\n### let's talk about \"var\" first:\n\n- scope of \"var\" is global or entire function block\n- varibles defined by \"var\" can be pre-parsed, that is, variables can be used before definition, such as:\n\n\t`console.log(a); var a = 10;`\n- varibles defined by \"var\" can be redefined:\n\n\t`var a = 10; console.log(a); var a = 20; console.log(20);` result is 10 20\n\n### let\n\n- Variables or statements and expressions declared by \"let\", the scope of \"let\" is block-level scope (simple and rough can be understood as a block-level scope surrounded by two braces)\n- In the same scope, \"let\" cannot be repeatedly declared, for example:：\n\n\t`let a = 10; console.log(a); let a = 20;` \n\t\n\tThe above code will report an error because the \"a\" variable is repeatedly declared in the same scope.\n- let cannot be pre-parsed, that is:\n\n\t`console.log(a); let a = 10;` <font color=\"red\">will cause an error</font>\n\t\n### const\n\nconst is simple, it has all the features of let, and the variables defined are constants and cannot be repeatedly assigned.\n\n## Summary\n\nI have introduced the basics of \"let\", \"const\", and \"var\" above. It is very simple. The emergence of \"let\" and \"const\" has optimized the declaration of variables, expressions, and so on. If you don't consider compatibility, let's use \"let\" instead of \"var\".\n\t\n## References\n\n+ https://www.jianshu.com/p/13444c467ce2\n+ https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\n\n</font>","source":"_posts/es6-summary-1.md","raw":"---\ntitle: es6_summary_1\ndate: 2020-01-01 19:05:38\ntags: \n - JavaScript\n - ECMAScript 6\n - Front End Development\n - Web Development\ncomments: true\ncategories: Front-end\nimg: https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/blog-cover-imgs/frontend-js-article1.jpeg\n---\n<center> <h1>ES6 Summary #1</h1> </center>\n<center> <h2> <font color = lightgray>Let, Const and Var</font> </h2> </center>\n\n<font size = 3>\n\n## Preface\n\nI have learned and got in touch with Front End Development for several years. Most experiences from university and internship. But I don't have too many industrial level experiences. Speaking of Front End Development, I should talk about the history of Front End. From the simplest UI-like work, till now, various Front End Frameworks have emerged in endlessly, and Front End Development has also changed from insignificant to become as important as back-end now in web development. Also due to the development of Web Front End technology in recent years, IOS and Android technologies have been squeezed and gradually been merged into the Front End Development in some company. This makes the importance of Front End of Web development faintly surpasses the importance of Back End Development.\n\nThe above is my personal understanding of the changes in the Front End. Excluding Android and IOS, Front End technology, no matter what framework or library you use, JavaScript is always the foundation and the most important part. JavaScript is mainly composed of ECMAScript (core), DOM (Document Object Model) and BOM (Browser Object Model).\n\nES6 (ECMAScript 6) was launched in 2015, and it has been launched for a few years. With the development in recent years, many new features have been added. Although there are a few versions later than ES6, like ES2017 and ES2019, it seems that the penetration rate is not as high as ES6, and the compatibility is even less. Having said that, ES6 guarantees a certain degree of backward compatibility. I will summarize some new basic knowledge points of ES6 later, including new keywords, new concepts, etc.\n\n## Compatibility of ES6\n\nFirst let's talk about the compatibility of ES6. ES6 supports most of the latest versions of browsers, including Edge, Firefox 68+, Chrome 78+, Opera65 +, Safari 12.1+ and other desktop browsers. The support rate is almost 100%. Mobile browsers, including IOS12 +, Samsung 9+, OperaMobile 54+ are also close to 100% compatible. As for IE, it is basically not supported, but you can convert ES6 code to ES5 code.\n\n### Compatibility of ES6 with IE (and other browsers)\n\n1. Compatible with basic syntax (excluding promises and some classes)\n\nBefore importing other scripts, import browser.min.js and set the type of the script tag to text / babel\n\n2. If using new features like Promise\n\nBabel compiles and converts JavaScript statements by default, and cannot convert new APIs. But Polyfill technology can be used. Import browser-polyfill to the development page:\n\n\t<script type=\"text/javascript\" src=\"你的browser-polyfill路径\"></script>\n\n## The use of \"let\", \"const\" and the difference with \"var\"\n\nLet and const are new keywords in ES6. They have the same effect as var and are used to declare variables. But there are also many differences between them. If you need to consider more compatibility, it is better to use var. Let's talk about their uses and differences.\n\n### let's talk about \"var\" first:\n\n- scope of \"var\" is global or entire function block\n- varibles defined by \"var\" can be pre-parsed, that is, variables can be used before definition, such as:\n\n\t`console.log(a); var a = 10;`\n- varibles defined by \"var\" can be redefined:\n\n\t`var a = 10; console.log(a); var a = 20; console.log(20);` result is 10 20\n\n### let\n\n- Variables or statements and expressions declared by \"let\", the scope of \"let\" is block-level scope (simple and rough can be understood as a block-level scope surrounded by two braces)\n- In the same scope, \"let\" cannot be repeatedly declared, for example:：\n\n\t`let a = 10; console.log(a); let a = 20;` \n\t\n\tThe above code will report an error because the \"a\" variable is repeatedly declared in the same scope.\n- let cannot be pre-parsed, that is:\n\n\t`console.log(a); let a = 10;` <font color=\"red\">will cause an error</font>\n\t\n### const\n\nconst is simple, it has all the features of let, and the variables defined are constants and cannot be repeatedly assigned.\n\n## Summary\n\nI have introduced the basics of \"let\", \"const\", and \"var\" above. It is very simple. The emergence of \"let\" and \"const\" has optimized the declaration of variables, expressions, and so on. If you don't consider compatibility, let's use \"let\" instead of \"var\".\n\t\n## References\n\n+ https://www.jianshu.com/p/13444c467ce2\n+ https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\n\n</font>","slug":"es6-summary-1","published":1,"updated":"2020-01-27T21:47:04.898Z","layout":"post","photos":[],"link":"","_id":"ck5xn1y2s0000ynaaax5m80lz","content":"<center> <h1>ES6 Summary #1</h1> </center>\n<center> <h2> <font color=\"lightgray\">Let, Const and Var</font> </h2> </center>\n\n<font size=\"3\">\n\n<h2 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h2><p>I have learned and got in touch with Front End Development for several years. Most experiences from university and internship. But I don’t have too many industrial level experiences. Speaking of Front End Development, I should talk about the history of Front End. From the simplest UI-like work, till now, various Front End Frameworks have emerged in endlessly, and Front End Development has also changed from insignificant to become as important as back-end now in web development. Also due to the development of Web Front End technology in recent years, IOS and Android technologies have been squeezed and gradually been merged into the Front End Development in some company. This makes the importance of Front End of Web development faintly surpasses the importance of Back End Development.</p>\n<p>The above is my personal understanding of the changes in the Front End. Excluding Android and IOS, Front End technology, no matter what framework or library you use, JavaScript is always the foundation and the most important part. JavaScript is mainly composed of ECMAScript (core), DOM (Document Object Model) and BOM (Browser Object Model).</p>\n<p>ES6 (ECMAScript 6) was launched in 2015, and it has been launched for a few years. With the development in recent years, many new features have been added. Although there are a few versions later than ES6, like ES2017 and ES2019, it seems that the penetration rate is not as high as ES6, and the compatibility is even less. Having said that, ES6 guarantees a certain degree of backward compatibility. I will summarize some new basic knowledge points of ES6 later, including new keywords, new concepts, etc.</p>\n<h2 id=\"Compatibility-of-ES6\"><a href=\"#Compatibility-of-ES6\" class=\"headerlink\" title=\"Compatibility of ES6\"></a>Compatibility of ES6</h2><p>First let’s talk about the compatibility of ES6. ES6 supports most of the latest versions of browsers, including Edge, Firefox 68+, Chrome 78+, Opera65 +, Safari 12.1+ and other desktop browsers. The support rate is almost 100%. Mobile browsers, including IOS12 +, Samsung 9+, OperaMobile 54+ are also close to 100% compatible. As for IE, it is basically not supported, but you can convert ES6 code to ES5 code.</p>\n<h3 id=\"Compatibility-of-ES6-with-IE-and-other-browsers\"><a href=\"#Compatibility-of-ES6-with-IE-and-other-browsers\" class=\"headerlink\" title=\"Compatibility of ES6 with IE (and other browsers)\"></a>Compatibility of ES6 with IE (and other browsers)</h3><ol>\n<li>Compatible with basic syntax (excluding promises and some classes)</li>\n</ol>\n<p>Before importing other scripts, import browser.min.js and set the type of the script tag to text / babel</p>\n<ol start=\"2\">\n<li>If using new features like Promise</li>\n</ol>\n<p>Babel compiles and converts JavaScript statements by default, and cannot convert new APIs. But Polyfill technology can be used. Import browser-polyfill to the development page:</p>\n<pre><code>&lt;script type=\"text/javascript\" src=\"你的browser-polyfill路径\"&gt;&lt;/script&gt;</code></pre><h2 id=\"The-use-of-“let”-“const”-and-the-difference-with-“var”\"><a href=\"#The-use-of-“let”-“const”-and-the-difference-with-“var”\" class=\"headerlink\" title=\"The use of “let”, “const” and the difference with “var”\"></a>The use of “let”, “const” and the difference with “var”</h2><p>Let and const are new keywords in ES6. They have the same effect as var and are used to declare variables. But there are also many differences between them. If you need to consider more compatibility, it is better to use var. Let’s talk about their uses and differences.</p>\n<h3 id=\"let’s-talk-about-“var”-first\"><a href=\"#let’s-talk-about-“var”-first\" class=\"headerlink\" title=\"let’s talk about “var” first:\"></a>let’s talk about “var” first:</h3><ul>\n<li><p>scope of “var” is global or entire function block</p>\n</li>\n<li><p>varibles defined by “var” can be pre-parsed, that is, variables can be used before definition, such as:</p>\n<p>  <code>console.log(a); var a = 10;</code></p>\n</li>\n<li><p>varibles defined by “var” can be redefined:</p>\n<p>  <code>var a = 10; console.log(a); var a = 20; console.log(20);</code> result is 10 20</p>\n</li>\n</ul>\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><ul>\n<li><p>Variables or statements and expressions declared by “let”, the scope of “let” is block-level scope (simple and rough can be understood as a block-level scope surrounded by two braces)</p>\n</li>\n<li><p>In the same scope, “let” cannot be repeatedly declared, for example:：</p>\n<p>  <code>let a = 10; console.log(a); let a = 20;</code> </p>\n<p>  The above code will report an error because the “a” variable is repeatedly declared in the same scope.</p>\n</li>\n<li><p>let cannot be pre-parsed, that is:</p>\n<p>  <code>console.log(a); let a = 10;</code> <font color=\"red\">will cause an error</font></p>\n</li>\n</ul>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p>const is simple, it has all the features of let, and the variables defined are constants and cannot be repeatedly assigned.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>I have introduced the basics of “let”, “const”, and “var” above. It is very simple. The emergence of “let” and “const” has optimized the declaration of variables, expressions, and so on. If you don’t consider compatibility, let’s use “let” instead of “var”.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/13444c467ce2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/13444c467ce2</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla</a></li>\n</ul>\n</font><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<center> <h1>ES6 Summary #1</h1> </center>\n<center> <h2> <font color=\"lightgray\">Let, Const and Var</font> </h2> </center>\n\n<font size=\"3\">\n\n<h2 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h2><p>I have learned and got in touch with Front End Development for several years. Most experiences from university and internship. But I don’t have too many industrial level experiences. Speaking of Front End Development, I should talk about the history of Front End. From the simplest UI-like work, till now, various Front End Frameworks have emerged in endlessly, and Front End Development has also changed from insignificant to become as important as back-end now in web development. Also due to the development of Web Front End technology in recent years, IOS and Android technologies have been squeezed and gradually been merged into the Front End Development in some company. This makes the importance of Front End of Web development faintly surpasses the importance of Back End Development.</p>\n<p>The above is my personal understanding of the changes in the Front End. Excluding Android and IOS, Front End technology, no matter what framework or library you use, JavaScript is always the foundation and the most important part. JavaScript is mainly composed of ECMAScript (core), DOM (Document Object Model) and BOM (Browser Object Model).</p>\n<p>ES6 (ECMAScript 6) was launched in 2015, and it has been launched for a few years. With the development in recent years, many new features have been added. Although there are a few versions later than ES6, like ES2017 and ES2019, it seems that the penetration rate is not as high as ES6, and the compatibility is even less. Having said that, ES6 guarantees a certain degree of backward compatibility. I will summarize some new basic knowledge points of ES6 later, including new keywords, new concepts, etc.</p>\n<h2 id=\"Compatibility-of-ES6\"><a href=\"#Compatibility-of-ES6\" class=\"headerlink\" title=\"Compatibility of ES6\"></a>Compatibility of ES6</h2><p>First let’s talk about the compatibility of ES6. ES6 supports most of the latest versions of browsers, including Edge, Firefox 68+, Chrome 78+, Opera65 +, Safari 12.1+ and other desktop browsers. The support rate is almost 100%. Mobile browsers, including IOS12 +, Samsung 9+, OperaMobile 54+ are also close to 100% compatible. As for IE, it is basically not supported, but you can convert ES6 code to ES5 code.</p>\n<h3 id=\"Compatibility-of-ES6-with-IE-and-other-browsers\"><a href=\"#Compatibility-of-ES6-with-IE-and-other-browsers\" class=\"headerlink\" title=\"Compatibility of ES6 with IE (and other browsers)\"></a>Compatibility of ES6 with IE (and other browsers)</h3><ol>\n<li>Compatible with basic syntax (excluding promises and some classes)</li>\n</ol>\n<p>Before importing other scripts, import browser.min.js and set the type of the script tag to text / babel</p>\n<ol start=\"2\">\n<li>If using new features like Promise</li>\n</ol>\n<p>Babel compiles and converts JavaScript statements by default, and cannot convert new APIs. But Polyfill technology can be used. Import browser-polyfill to the development page:</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;你的browser-polyfill路径&quot;&gt;&lt;/script&gt;</code></pre><h2 id=\"The-use-of-“let”-“const”-and-the-difference-with-“var”\"><a href=\"#The-use-of-“let”-“const”-and-the-difference-with-“var”\" class=\"headerlink\" title=\"The use of “let”, “const” and the difference with “var”\"></a>The use of “let”, “const” and the difference with “var”</h2><p>Let and const are new keywords in ES6. They have the same effect as var and are used to declare variables. But there are also many differences between them. If you need to consider more compatibility, it is better to use var. Let’s talk about their uses and differences.</p>\n<h3 id=\"let’s-talk-about-“var”-first\"><a href=\"#let’s-talk-about-“var”-first\" class=\"headerlink\" title=\"let’s talk about “var” first:\"></a>let’s talk about “var” first:</h3><ul>\n<li><p>scope of “var” is global or entire function block</p>\n</li>\n<li><p>varibles defined by “var” can be pre-parsed, that is, variables can be used before definition, such as:</p>\n<p>  <code>console.log(a); var a = 10;</code></p>\n</li>\n<li><p>varibles defined by “var” can be redefined:</p>\n<p>  <code>var a = 10; console.log(a); var a = 20; console.log(20);</code> result is 10 20</p>\n</li>\n</ul>\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><ul>\n<li><p>Variables or statements and expressions declared by “let”, the scope of “let” is block-level scope (simple and rough can be understood as a block-level scope surrounded by two braces)</p>\n</li>\n<li><p>In the same scope, “let” cannot be repeatedly declared, for example:：</p>\n<p>  <code>let a = 10; console.log(a); let a = 20;</code> </p>\n<p>  The above code will report an error because the “a” variable is repeatedly declared in the same scope.</p>\n</li>\n<li><p>let cannot be pre-parsed, that is:</p>\n<p>  <code>console.log(a); let a = 10;</code> <font color=\"red\">will cause an error</font></p>\n</li>\n</ul>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p>const is simple, it has all the features of let, and the variables defined are constants and cannot be repeatedly assigned.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>I have introduced the basics of “let”, “const”, and “var” above. It is very simple. The emergence of “let” and “const” has optimized the declaration of variables, expressions, and so on. If you don’t consider compatibility, let’s use “let” instead of “var”.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/13444c467ce2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/13444c467ce2</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla</a></li>\n</ul>\n</font>"},{"title":"es6_summary_2","date":"2020-01-28T08:47:18.000Z","comments":1,"img":"https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/blog-cover-imgs/frontend-js-article1.jpeg","_content":"<center> <h1>ES6 Summary #2</h1> </center>\n<center> <h2> <font color = lightgray>Asynchronous and synchronous</font> </h2> </center>\n\n### ***<u>Asynchronous and synchronous are a message notification mechanism.</u>***\n\n## What is Asynchronous？\n\n### Asynchronous non-blocking：\n\n    For example: A calls B, while B processes, A continues to execute. The processing of B ends, the result is returned, and A is executed again with the result of B. A does not have to wait for the end of B's execution during this period.\n\n### Synchronous blocking：\n\n\tFor example: A calls B, and B returns the result to A after processing, and A continues to execute. A waits for the end of B's execution during this period. The execution of normal code is performed line by line, which is the synchronization mechanism.\n\t\n### The most basic way to achieve asynchronous: ***Using timers***\n\n\tfunction move(ele, dir, dist) {\n        let curPos = parseFloat(getComputedStyle(ele)[dir]);\n        let speed = (dist - curPos) /Math.abs(curPos - dist);\n        clearInterval(ele.timer);\n        console.log(\"start moving...\");\n        ele.timer = setInterval(() => {\n           if (Math.abs(curPos - dist) <= 0) {\n                clearInterval(ele.timer);\n                console.log(\"finish moving...\");\n           } else {\n                curPos += speed;\n                ele.style[dir] = curPos + \"px\";\n           }\n        }, 20);\n        console.log(\"printing....\");\n    }\n\n    let box = document.querySelector(\"#box\");\n\n    move(box, \"left\", 100);\n    \nThe result is：\n\n![Code Result](https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result1.gif)\n\nThe printing result is：\n\n![Code Printing Result](https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result2.png)\n\nIt can be seen from the results that \"printing...\" is printed before the end of the block movement, and it is not executed sequentially as in a regular program. This is the most basic asynchronous implementation.\n\n### Need more operation after asynchronous funtion end?\n\nThere must be many solutions, but I think the better method is the callback function method, modify the above code：\n\n\tfunction move(ele, dir, dist, callback) {\n        let curPos = parseFloat(getComputedStyle(ele)[dir]);\n        let speed = (dist - curPos) /Math.abs(curPos - dist);\n        clearInterval(ele.timer);\n        console.log(\"start moving...\");\n        ele.timer = setInterval(() => {\n           if (Math.abs(curPos - dist) <= 0) {\n                clearInterval(ele.timer);\n                console.log(\"finish moving...\");\n                callback && callback(); // ===>First determine whether there is a callback, if it exists, then execute\n           } else {\n                curPos += speed;\n                ele.style[dir] = curPos + \"px\";\n           }\n        }, 20);\n        console.log(\"printing....\");\n\n    }\n\n    let box = document.querySelector(\"#box\");\n\n    move(box, \"left\", 100, () => {\n        console.log(\"Run callback function\");\n    });\n \nThe result is：\n \n\tstart moving...\n\tprinting....\n\tfinish moving...\n\tRun callback function\n\t\nThis can well solve the problems that require asynchronous results or need to execute some code after asynchronous execution.\n\n### This implementation of asynchronous and callback issues: ***Callback Hell***\nThe Callback Hell is to call call back function multiple times, resulting in too many layers, as follows:\n\t\n\tmove(box, \"left\", 100,() => {\n        move(box, \"top\", 100,() => {\n            move(box, \"left\", -100,() => {\n                move(box, \"top\", -100,() => {\n                    console.log(\"finish...\");\n                });\n            });\n        });\n    });\n    \nThe layer of above code is too deep, which is not conducive to code reuse, maintainability, and readability.\n\n## Callback Hell Solution\n\nThere are three solutions, namely using **Promise**, using **Async and Await**, and using **Generator** function. I will talk about the Promise.\n\n### Promise concept and usage\n\n***Promises do not solve the asynchronous problem itself, but solve the asynchronous writing problem, making asynchronous writing clearly.***\n\nLet's talk about promises first. In MDN, promises are defined as follows:\n\t\n\tThe Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.[1]\n\t\nPromise has three states: <b> Pending (waiting for asynchronous process execution to complete); Fulfilled or Resolved (successful); Rejected (failed) </ b>.\nThe result of the asynchronous operation determines the current state, and other content cannot interfere with the Promise state. In addition, if the status of a Promise changes, it will not change again. For example, if you change from a Pending turn to Rejected, state will not return to Pending or become Fulfilled again. [2]\n\nThe following shows a simple use of a Promise:\n\n\tlet p = new Promise((resolve, reject) => {\n        \tsetTimeout(() => {\n\t            console.log(p);\n\t            resolve();\n        \t}, 2000); \n    \t});\n\n    \tp.then(() => {\n        \tconsole.log(p);\n        \tconsole.log(\"then....\");\n    \t}); \n    \t\nThe \"then\" method is equivalent to the callback function. According to the above code, it can be found that a function is passed after the Promise is created. The parameters of the function are two functions - Resolve and Reject, corresponding to Rejected and Resolved (Fulfilled) States. Now you can see at a glance. If the asynchronous execution is successful, you call \"resolve()\", otherwise \"reject()\". The above results are:\n\nAfter the program runs for two seconds, it prints the following：\n\t\n\tPromise {<pending>}\n\tPromise {<resolved>: undefined}\n\tthen....\n\t\nIt can be seen that if the asynchronous execution is successful and the Resolve function is called, the program will execute down to \"then\", and from the two printed \"p\"s, we can see that the status of the Promise changes from Pending to Resolved.\n\n#### So how do you use asynchronous results?\n\nMany times, the results produced by asynchronous are what we will use later, so if we use Promise to optimize asynchronous writing, like above, how do we use asynchronous results?\n\nIn fact, the answer already appears in the above code. The second line of the above code results, There is an \"undefined\" value after \"resolved\". This place is used to store asynchronous results. The code can be changed as follows:\n\n\tlet p = new Promise((resolve, reject) => {\n\t        setTimeout(() => {\n\t            console.log(p);\n\t            resolve(\"parameters...\"); // =======》Here you can pass parameters when executing resolve.\n\t        }, 2000); \n\t });\n\t\n\t p.then((res) => { // ======》You can pass a parameter here, such asres\n\t        console.log(p);\n\t        console.log(res); \t\t\n\t        console.log(\"then....\");\n\t });\n\nThe results are：\n\n\tPromise {<pending>}\n\tPromise {<resolved>: \"parameters...\"}\n\tparameters...\n\tthen....\n\nCombining the above code and results, we can see that by passing the asynchronous result to the resolve method, after calling the then method, it can receive a parameter, which will point to the asynchronous result. This makes it possible to use asynchronous results.\n\nIf you want to use the result of \"reject\" in the \"then\" function, it is also very simple. Pass a second callback function as a parameter, such as:\n\t\n\tp.then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }, (rej) => {\n\t        console.log(rej);\n\t });\n\t \nAt a glance, I won't go into details here.\n\nHowever, if we should call the \"then\" function for multiple times, two functions are passed in each function to handle the success and failure results, which is sometimes cumbersome. Therefore, if all steps are processed with errors or failures, but only one kind of information need to be given to the user (such as network request error), you can use the following methods:\n\n\tp.then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }).then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }).then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }).catch((rej) => {\n\t \tconsole.log(\"fail...\");\n\t })\n\n\nIf you want to implement the previous scenario that requires multiple callbacks, the code is as follows:\n\n\tlet po = new Promise((resolve, reject) => {\n        resolve(1);\n    });\n\n    po.then((res) => {\n       console.log(res);\n       return 2;\n    }).then((res) => {\n       console.log(res);\n       return 3;\n    }).then((res) => {\n       console.log(res);\n       return 4;\n    }).then((res) => {\n       console.log(res);\n    })\n    \nResult is：\n \n\t1\n\t2\n\t3\n\t4\n\t\nObviously, the result returned by the \"then\" method can be obtained by the \"then\" method behind. But why is it available? We can assign a value to the result of the \"then\" method and print it. The code is:\n\n\tlet po = new Promise((resolve, reject) => {\n         resolve(1);\n     });\n\n     let pt = po.then((res) => {\n         console.log(res);\n         return \"pt\";\n     })\n\n     console.log(pt);\n     \n Result is：\n \n\tPromise {<pending>}__proto__: Promise[[PromiseStatus]]: \"resolved\"[[PromiseValue]]: \"pt\"\n\t1\n\nAfter the above code is run, the last line of \"pt\" is printed. Because of the asynchronous reason, then the number \"1\" of the resolve passed into the \"then\" function is printed. The expansion result of \"pt\" can be seen that the \"then\" method will return a Promise object to us, and from the above results, it is seen that a Promise object with \"resolved\" state is returned.\n\nNow that we all understand the use of promises, the example of moving blocks above can be rewritten as:\n\n\tfunction move(ele, dir, dist) {\n        let curPos = parseFloat(getComputedStyle(ele)[dir]);\n        let speed = (dist - curPos) /Math.abs(curPos - dist);\n\n        return new Promise((resolve, reject) => {\n            clearInterval(ele.timer);\n            ele.timer = setInterval(() => {\n            if (Math.abs(curPos - dist) <= 0) {\n                    clearInterval(ele.timer); \n                    resolve();\n            } else {\n                    curPos += speed;\n                    ele.style[dir] = curPos + \"px\";\n            }\n            }, 20);\n        })\n    }\n\n    let box = document.querySelector(\"#box\");\n\n    move(box, \"left\", 100).then(() => {\n        return move(box, \"top\", 100);\n    }).then(() => {\n        return move(box, \"left\", 0);\n    }).then(() => {\n        return move(box, \"top\", 0);\n    })\n    \nThe result is the same as the above result. But readability and code scalability have been significantly improved.\n\n#### Promise \"all\" function\n\nAfter talking about the use of Promise and the use of \"catch\" and \"then\", later, we will talk about another common method, Promise \"all\" function.\n\nMDN's description of the \"all\" method is:\n\t\n\tThe Promise.all() method returns a single Promise that fulfills when all of the promises passed as an iterable have been fulfilled or when the iterable contains no promises. It rejects with the reason of the first promise that rejects.[3] \n\t\nFor example, three different Promise objects are created, and the \"all\" method is called to execute the three Promise objects. If all three Promise objects are in the \"resolved\" state, then, can be executed downwards.\n\nFor example:\n\t\n\t let p1 = new Promise((resolve, reject) => {\n         console.log(1);\n         resolve();\n     });\n\n\n    let p2 = new Promise((resolve, reject) => {\n         console.log(2);\n         resolve();\n     });\n\n     let p3 = new Promise((resolve, reject) => {\n         console.log(3);\n         resolve();\n     });\n\n     Promise.all([p1, p2, p3]).then(() =>{\n         console.log(4);\n     })\n\t\nResult:\n\n\t1\n\t2\n\t3\n\t4\n\t\nIf the execution status of any Promise object is rejected. You need to use catch method to catch errors in \"then\" or at the end of the code, otherwise an error will be reported.\n\n### Promise \"race\" function\n\nThis method is exactly the opposite of the all method. The all method is executed. And after all execution is complete, the following content is executed. As the name of the race method implies, when one of the executions of Promise objects ends, the following method starts to execute. code show as below:\n\n\t let p1 = new Promise((resolve, reject) => {\n         setTimeout(() => {\n            console.log(1);\n            resolve();\n         }, 2000);\n     });\n\n\n    let p2 = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(2);\n            resolve();\n         }, 1000);\n     });\n\n     let p3 = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(3);\n            resolve();\n         }, 5000);\n     });\n\n     Promise.race([p1, p2, p3]).then(() =>{\n         console.log(4);\n     }).catch(() => {\n         console.log(\"err\");\n     });\n\n结果是：\n\t\n\t2\n\t4\n\t1\n\t3\n\t\nIn the above code, we set the execution time of \"p1\" to 2s, \"p2\" to 1s, and \"p3\" to 5s. As can be seen from the results, after the execution of \"p1\", the following \"then\" method is directly executed, so the printing order is 2, 4 and the last two will finish later.\n\n### Async and Await\n\nSometimes when using the series of Promise methods, I still feel that the readability is general and the code scalability is limited. At this time, you can use Async and Await in combination with Promise. The sample code is as follows:\n\n\tasync function fn () {\n        let p1 = await new Promise((resolve) => {\n            console.log(1);\n            resolve(2);\n        });\n\n        let p2 = await new Promise((resolve) => {\n            console.log(p1);\n            resolve(3);\n        });\n\n        let p3 = await new Promise((resolve) => {\n            console.log(p2);\n            resolve(4);\n        });\n        console.log(p3);\n    }\n\n    fn();\n    \n    Result is：\n    1\n    2\n    3\n    4\n    \nAsync and Await further simplify the amount of code, optimize the writing, and are by far it is the most commonly used asynchronous writing.\n\nNote:\n\n1. \"Await\" is followed by a method that returns a Promise object or creates a new Promise object.\n2. \"Await\" must be placed in the function marked by \"Async\".\n3. If you need to catch an exception, you can use \"try {} catch (exception) {}\" to write \"await\" into the code block after \"try\".\n4. The \"Async\" function returns a Promise, and the status is \"resolved\".\n5. \"Await\" can accept non-Promise object as the result of an await expression. But no matter what is behind await, it will block the execution of the internal code of the \"async\" function. If there is an external code at this time, the external code is executed first, and then it returns to the internal execution.\n6. If the code in async is synchronous, then it executes synchronously.\n\n\n## Summary\n\nPromise is almost finished, and also briefly talked about Async and Await. It feels that the most important part is to know how to use them. As for Generator, I have never heard of it before, and I feel that it is less used, so I'll look for a chance to talk about it later.\n\n## References\n[1] https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[2] https://www.jianshu.com/p/1ab01ee4102a\n\n[3] https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n","source":"_posts/es6-summary-2.md","raw":"---\ntitle: es6_summary_2\ndate: 2020-01-28 00:47:18\ntags:\n - JavaScript\n - ECMAScript 6\n - Front End Development\n - Web Development\ncomments: true\ncategories: Front-end\nimg: https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/blog-cover-imgs/frontend-js-article1.jpeg\n---\n<center> <h1>ES6 Summary #2</h1> </center>\n<center> <h2> <font color = lightgray>Asynchronous and synchronous</font> </h2> </center>\n\n### ***<u>Asynchronous and synchronous are a message notification mechanism.</u>***\n\n## What is Asynchronous？\n\n### Asynchronous non-blocking：\n\n    For example: A calls B, while B processes, A continues to execute. The processing of B ends, the result is returned, and A is executed again with the result of B. A does not have to wait for the end of B's execution during this period.\n\n### Synchronous blocking：\n\n\tFor example: A calls B, and B returns the result to A after processing, and A continues to execute. A waits for the end of B's execution during this period. The execution of normal code is performed line by line, which is the synchronization mechanism.\n\t\n### The most basic way to achieve asynchronous: ***Using timers***\n\n\tfunction move(ele, dir, dist) {\n        let curPos = parseFloat(getComputedStyle(ele)[dir]);\n        let speed = (dist - curPos) /Math.abs(curPos - dist);\n        clearInterval(ele.timer);\n        console.log(\"start moving...\");\n        ele.timer = setInterval(() => {\n           if (Math.abs(curPos - dist) <= 0) {\n                clearInterval(ele.timer);\n                console.log(\"finish moving...\");\n           } else {\n                curPos += speed;\n                ele.style[dir] = curPos + \"px\";\n           }\n        }, 20);\n        console.log(\"printing....\");\n    }\n\n    let box = document.querySelector(\"#box\");\n\n    move(box, \"left\", 100);\n    \nThe result is：\n\n![Code Result](https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result1.gif)\n\nThe printing result is：\n\n![Code Printing Result](https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result2.png)\n\nIt can be seen from the results that \"printing...\" is printed before the end of the block movement, and it is not executed sequentially as in a regular program. This is the most basic asynchronous implementation.\n\n### Need more operation after asynchronous funtion end?\n\nThere must be many solutions, but I think the better method is the callback function method, modify the above code：\n\n\tfunction move(ele, dir, dist, callback) {\n        let curPos = parseFloat(getComputedStyle(ele)[dir]);\n        let speed = (dist - curPos) /Math.abs(curPos - dist);\n        clearInterval(ele.timer);\n        console.log(\"start moving...\");\n        ele.timer = setInterval(() => {\n           if (Math.abs(curPos - dist) <= 0) {\n                clearInterval(ele.timer);\n                console.log(\"finish moving...\");\n                callback && callback(); // ===>First determine whether there is a callback, if it exists, then execute\n           } else {\n                curPos += speed;\n                ele.style[dir] = curPos + \"px\";\n           }\n        }, 20);\n        console.log(\"printing....\");\n\n    }\n\n    let box = document.querySelector(\"#box\");\n\n    move(box, \"left\", 100, () => {\n        console.log(\"Run callback function\");\n    });\n \nThe result is：\n \n\tstart moving...\n\tprinting....\n\tfinish moving...\n\tRun callback function\n\t\nThis can well solve the problems that require asynchronous results or need to execute some code after asynchronous execution.\n\n### This implementation of asynchronous and callback issues: ***Callback Hell***\nThe Callback Hell is to call call back function multiple times, resulting in too many layers, as follows:\n\t\n\tmove(box, \"left\", 100,() => {\n        move(box, \"top\", 100,() => {\n            move(box, \"left\", -100,() => {\n                move(box, \"top\", -100,() => {\n                    console.log(\"finish...\");\n                });\n            });\n        });\n    });\n    \nThe layer of above code is too deep, which is not conducive to code reuse, maintainability, and readability.\n\n## Callback Hell Solution\n\nThere are three solutions, namely using **Promise**, using **Async and Await**, and using **Generator** function. I will talk about the Promise.\n\n### Promise concept and usage\n\n***Promises do not solve the asynchronous problem itself, but solve the asynchronous writing problem, making asynchronous writing clearly.***\n\nLet's talk about promises first. In MDN, promises are defined as follows:\n\t\n\tThe Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.[1]\n\t\nPromise has three states: <b> Pending (waiting for asynchronous process execution to complete); Fulfilled or Resolved (successful); Rejected (failed) </ b>.\nThe result of the asynchronous operation determines the current state, and other content cannot interfere with the Promise state. In addition, if the status of a Promise changes, it will not change again. For example, if you change from a Pending turn to Rejected, state will not return to Pending or become Fulfilled again. [2]\n\nThe following shows a simple use of a Promise:\n\n\tlet p = new Promise((resolve, reject) => {\n        \tsetTimeout(() => {\n\t            console.log(p);\n\t            resolve();\n        \t}, 2000); \n    \t});\n\n    \tp.then(() => {\n        \tconsole.log(p);\n        \tconsole.log(\"then....\");\n    \t}); \n    \t\nThe \"then\" method is equivalent to the callback function. According to the above code, it can be found that a function is passed after the Promise is created. The parameters of the function are two functions - Resolve and Reject, corresponding to Rejected and Resolved (Fulfilled) States. Now you can see at a glance. If the asynchronous execution is successful, you call \"resolve()\", otherwise \"reject()\". The above results are:\n\nAfter the program runs for two seconds, it prints the following：\n\t\n\tPromise {<pending>}\n\tPromise {<resolved>: undefined}\n\tthen....\n\t\nIt can be seen that if the asynchronous execution is successful and the Resolve function is called, the program will execute down to \"then\", and from the two printed \"p\"s, we can see that the status of the Promise changes from Pending to Resolved.\n\n#### So how do you use asynchronous results?\n\nMany times, the results produced by asynchronous are what we will use later, so if we use Promise to optimize asynchronous writing, like above, how do we use asynchronous results?\n\nIn fact, the answer already appears in the above code. The second line of the above code results, There is an \"undefined\" value after \"resolved\". This place is used to store asynchronous results. The code can be changed as follows:\n\n\tlet p = new Promise((resolve, reject) => {\n\t        setTimeout(() => {\n\t            console.log(p);\n\t            resolve(\"parameters...\"); // =======》Here you can pass parameters when executing resolve.\n\t        }, 2000); \n\t });\n\t\n\t p.then((res) => { // ======》You can pass a parameter here, such asres\n\t        console.log(p);\n\t        console.log(res); \t\t\n\t        console.log(\"then....\");\n\t });\n\nThe results are：\n\n\tPromise {<pending>}\n\tPromise {<resolved>: \"parameters...\"}\n\tparameters...\n\tthen....\n\nCombining the above code and results, we can see that by passing the asynchronous result to the resolve method, after calling the then method, it can receive a parameter, which will point to the asynchronous result. This makes it possible to use asynchronous results.\n\nIf you want to use the result of \"reject\" in the \"then\" function, it is also very simple. Pass a second callback function as a parameter, such as:\n\t\n\tp.then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }, (rej) => {\n\t        console.log(rej);\n\t });\n\t \nAt a glance, I won't go into details here.\n\nHowever, if we should call the \"then\" function for multiple times, two functions are passed in each function to handle the success and failure results, which is sometimes cumbersome. Therefore, if all steps are processed with errors or failures, but only one kind of information need to be given to the user (such as network request error), you can use the following methods:\n\n\tp.then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }).then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }).then((res) => {\n\t        console.log(p);\n\t        console.log(res);\n\t        console.log(\"then....\");\n\t }).catch((rej) => {\n\t \tconsole.log(\"fail...\");\n\t })\n\n\nIf you want to implement the previous scenario that requires multiple callbacks, the code is as follows:\n\n\tlet po = new Promise((resolve, reject) => {\n        resolve(1);\n    });\n\n    po.then((res) => {\n       console.log(res);\n       return 2;\n    }).then((res) => {\n       console.log(res);\n       return 3;\n    }).then((res) => {\n       console.log(res);\n       return 4;\n    }).then((res) => {\n       console.log(res);\n    })\n    \nResult is：\n \n\t1\n\t2\n\t3\n\t4\n\t\nObviously, the result returned by the \"then\" method can be obtained by the \"then\" method behind. But why is it available? We can assign a value to the result of the \"then\" method and print it. The code is:\n\n\tlet po = new Promise((resolve, reject) => {\n         resolve(1);\n     });\n\n     let pt = po.then((res) => {\n         console.log(res);\n         return \"pt\";\n     })\n\n     console.log(pt);\n     \n Result is：\n \n\tPromise {<pending>}__proto__: Promise[[PromiseStatus]]: \"resolved\"[[PromiseValue]]: \"pt\"\n\t1\n\nAfter the above code is run, the last line of \"pt\" is printed. Because of the asynchronous reason, then the number \"1\" of the resolve passed into the \"then\" function is printed. The expansion result of \"pt\" can be seen that the \"then\" method will return a Promise object to us, and from the above results, it is seen that a Promise object with \"resolved\" state is returned.\n\nNow that we all understand the use of promises, the example of moving blocks above can be rewritten as:\n\n\tfunction move(ele, dir, dist) {\n        let curPos = parseFloat(getComputedStyle(ele)[dir]);\n        let speed = (dist - curPos) /Math.abs(curPos - dist);\n\n        return new Promise((resolve, reject) => {\n            clearInterval(ele.timer);\n            ele.timer = setInterval(() => {\n            if (Math.abs(curPos - dist) <= 0) {\n                    clearInterval(ele.timer); \n                    resolve();\n            } else {\n                    curPos += speed;\n                    ele.style[dir] = curPos + \"px\";\n            }\n            }, 20);\n        })\n    }\n\n    let box = document.querySelector(\"#box\");\n\n    move(box, \"left\", 100).then(() => {\n        return move(box, \"top\", 100);\n    }).then(() => {\n        return move(box, \"left\", 0);\n    }).then(() => {\n        return move(box, \"top\", 0);\n    })\n    \nThe result is the same as the above result. But readability and code scalability have been significantly improved.\n\n#### Promise \"all\" function\n\nAfter talking about the use of Promise and the use of \"catch\" and \"then\", later, we will talk about another common method, Promise \"all\" function.\n\nMDN's description of the \"all\" method is:\n\t\n\tThe Promise.all() method returns a single Promise that fulfills when all of the promises passed as an iterable have been fulfilled or when the iterable contains no promises. It rejects with the reason of the first promise that rejects.[3] \n\t\nFor example, three different Promise objects are created, and the \"all\" method is called to execute the three Promise objects. If all three Promise objects are in the \"resolved\" state, then, can be executed downwards.\n\nFor example:\n\t\n\t let p1 = new Promise((resolve, reject) => {\n         console.log(1);\n         resolve();\n     });\n\n\n    let p2 = new Promise((resolve, reject) => {\n         console.log(2);\n         resolve();\n     });\n\n     let p3 = new Promise((resolve, reject) => {\n         console.log(3);\n         resolve();\n     });\n\n     Promise.all([p1, p2, p3]).then(() =>{\n         console.log(4);\n     })\n\t\nResult:\n\n\t1\n\t2\n\t3\n\t4\n\t\nIf the execution status of any Promise object is rejected. You need to use catch method to catch errors in \"then\" or at the end of the code, otherwise an error will be reported.\n\n### Promise \"race\" function\n\nThis method is exactly the opposite of the all method. The all method is executed. And after all execution is complete, the following content is executed. As the name of the race method implies, when one of the executions of Promise objects ends, the following method starts to execute. code show as below:\n\n\t let p1 = new Promise((resolve, reject) => {\n         setTimeout(() => {\n            console.log(1);\n            resolve();\n         }, 2000);\n     });\n\n\n    let p2 = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(2);\n            resolve();\n         }, 1000);\n     });\n\n     let p3 = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            console.log(3);\n            resolve();\n         }, 5000);\n     });\n\n     Promise.race([p1, p2, p3]).then(() =>{\n         console.log(4);\n     }).catch(() => {\n         console.log(\"err\");\n     });\n\n结果是：\n\t\n\t2\n\t4\n\t1\n\t3\n\t\nIn the above code, we set the execution time of \"p1\" to 2s, \"p2\" to 1s, and \"p3\" to 5s. As can be seen from the results, after the execution of \"p1\", the following \"then\" method is directly executed, so the printing order is 2, 4 and the last two will finish later.\n\n### Async and Await\n\nSometimes when using the series of Promise methods, I still feel that the readability is general and the code scalability is limited. At this time, you can use Async and Await in combination with Promise. The sample code is as follows:\n\n\tasync function fn () {\n        let p1 = await new Promise((resolve) => {\n            console.log(1);\n            resolve(2);\n        });\n\n        let p2 = await new Promise((resolve) => {\n            console.log(p1);\n            resolve(3);\n        });\n\n        let p3 = await new Promise((resolve) => {\n            console.log(p2);\n            resolve(4);\n        });\n        console.log(p3);\n    }\n\n    fn();\n    \n    Result is：\n    1\n    2\n    3\n    4\n    \nAsync and Await further simplify the amount of code, optimize the writing, and are by far it is the most commonly used asynchronous writing.\n\nNote:\n\n1. \"Await\" is followed by a method that returns a Promise object or creates a new Promise object.\n2. \"Await\" must be placed in the function marked by \"Async\".\n3. If you need to catch an exception, you can use \"try {} catch (exception) {}\" to write \"await\" into the code block after \"try\".\n4. The \"Async\" function returns a Promise, and the status is \"resolved\".\n5. \"Await\" can accept non-Promise object as the result of an await expression. But no matter what is behind await, it will block the execution of the internal code of the \"async\" function. If there is an external code at this time, the external code is executed first, and then it returns to the internal execution.\n6. If the code in async is synchronous, then it executes synchronously.\n\n\n## Summary\n\nPromise is almost finished, and also briefly talked about Async and Await. It feels that the most important part is to know how to use them. As for Generator, I have never heard of it before, and I feel that it is less used, so I'll look for a chance to talk about it later.\n\n## References\n[1] https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[2] https://www.jianshu.com/p/1ab01ee4102a\n\n[3] https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n","slug":"es6-summary-2","published":1,"updated":"2020-01-28T08:47:55.190Z","layout":"post","photos":[],"link":"","_id":"ck5xn1y340002ynaa3ay4bhv1","content":"<center> <h1>ES6 Summary #2</h1> </center>\n<center> <h2> <font color=\"lightgray\">Asynchronous and synchronous</font> </h2> </center>\n\n<h3 id=\"Asynchronous-and-synchronous-are-a-message-notification-mechanism\"><a href=\"#Asynchronous-and-synchronous-are-a-message-notification-mechanism\" class=\"headerlink\" title=\"*Asynchronous and synchronous are a message notification mechanism.*\"></a><strong>*<u>Asynchronous and synchronous are a message notification mechanism.</u>*</strong></h3><h2 id=\"What-is-Asynchronous？\"><a href=\"#What-is-Asynchronous？\" class=\"headerlink\" title=\"What is Asynchronous？\"></a>What is Asynchronous？</h2><h3 id=\"Asynchronous-non-blocking：\"><a href=\"#Asynchronous-non-blocking：\" class=\"headerlink\" title=\"Asynchronous non-blocking：\"></a>Asynchronous non-blocking：</h3><pre><code>For example: A calls B, while B processes, A continues to execute. The processing of B ends, the result is returned, and A is executed again with the result of B. A does not have to wait for the end of B's execution during this period.</code></pre><h3 id=\"Synchronous-blocking：\"><a href=\"#Synchronous-blocking：\" class=\"headerlink\" title=\"Synchronous blocking：\"></a>Synchronous blocking：</h3><pre><code>For example: A calls B, and B returns the result to A after processing, and A continues to execute. A waits for the end of B's execution during this period. The execution of normal code is performed line by line, which is the synchronization mechanism.</code></pre><h3 id=\"The-most-basic-way-to-achieve-asynchronous-Using-timers\"><a href=\"#The-most-basic-way-to-achieve-asynchronous-Using-timers\" class=\"headerlink\" title=\"The most basic way to achieve asynchronous: Using timers\"></a>The most basic way to achieve asynchronous: <strong><em>Using timers</em></strong></h3><pre><code>function move(ele, dir, dist) {\n    let curPos = parseFloat(getComputedStyle(ele)[dir]);\n    let speed = (dist - curPos) /Math.abs(curPos - dist);\n    clearInterval(ele.timer);\n    console.log(\"start moving...\");\n    ele.timer = setInterval(() =&gt; {\n       if (Math.abs(curPos - dist) &lt;= 0) {\n            clearInterval(ele.timer);\n            console.log(\"finish moving...\");\n       } else {\n            curPos += speed;\n            ele.style[dir] = curPos + \"px\";\n       }\n    }, 20);\n    console.log(\"printing....\");\n}\n\nlet box = document.querySelector(\"#box\");\n\nmove(box, \"left\", 100);</code></pre><p>The result is：</p>\n<p><img src=\"https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result1.gif\" alt=\"Code Result\"></p>\n<p>The printing result is：</p>\n<p><img src=\"https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result2.png\" alt=\"Code Printing Result\"></p>\n<p>It can be seen from the results that “printing…” is printed before the end of the block movement, and it is not executed sequentially as in a regular program. This is the most basic asynchronous implementation.</p>\n<h3 id=\"Need-more-operation-after-asynchronous-funtion-end\"><a href=\"#Need-more-operation-after-asynchronous-funtion-end\" class=\"headerlink\" title=\"Need more operation after asynchronous funtion end?\"></a>Need more operation after asynchronous funtion end?</h3><p>There must be many solutions, but I think the better method is the callback function method, modify the above code：</p>\n<pre><code>function move(ele, dir, dist, callback) {\n    let curPos = parseFloat(getComputedStyle(ele)[dir]);\n    let speed = (dist - curPos) /Math.abs(curPos - dist);\n    clearInterval(ele.timer);\n    console.log(\"start moving...\");\n    ele.timer = setInterval(() =&gt; {\n       if (Math.abs(curPos - dist) &lt;= 0) {\n            clearInterval(ele.timer);\n            console.log(\"finish moving...\");\n            callback &amp;&amp; callback(); // ===&gt;First determine whether there is a callback, if it exists, then execute\n       } else {\n            curPos += speed;\n            ele.style[dir] = curPos + \"px\";\n       }\n    }, 20);\n    console.log(\"printing....\");\n\n}\n\nlet box = document.querySelector(\"#box\");\n\nmove(box, \"left\", 100, () =&gt; {\n    console.log(\"Run callback function\");\n});</code></pre><p>The result is：</p>\n<pre><code>start moving...\nprinting....\nfinish moving...\nRun callback function</code></pre><p>This can well solve the problems that require asynchronous results or need to execute some code after asynchronous execution.</p>\n<h3 id=\"This-implementation-of-asynchronous-and-callback-issues-Callback-Hell\"><a href=\"#This-implementation-of-asynchronous-and-callback-issues-Callback-Hell\" class=\"headerlink\" title=\"This implementation of asynchronous and callback issues: Callback Hell\"></a>This implementation of asynchronous and callback issues: <strong><em>Callback Hell</em></strong></h3><p>The Callback Hell is to call call back function multiple times, resulting in too many layers, as follows:</p>\n<pre><code>move(box, \"left\", 100,() =&gt; {\n    move(box, \"top\", 100,() =&gt; {\n        move(box, \"left\", -100,() =&gt; {\n            move(box, \"top\", -100,() =&gt; {\n                console.log(\"finish...\");\n            });\n        });\n    });\n});</code></pre><p>The layer of above code is too deep, which is not conducive to code reuse, maintainability, and readability.</p>\n<h2 id=\"Callback-Hell-Solution\"><a href=\"#Callback-Hell-Solution\" class=\"headerlink\" title=\"Callback Hell Solution\"></a>Callback Hell Solution</h2><p>There are three solutions, namely using <strong>Promise</strong>, using <strong>Async and Await</strong>, and using <strong>Generator</strong> function. I will talk about the Promise.</p>\n<h3 id=\"Promise-concept-and-usage\"><a href=\"#Promise-concept-and-usage\" class=\"headerlink\" title=\"Promise concept and usage\"></a>Promise concept and usage</h3><p><strong><em>Promises do not solve the asynchronous problem itself, but solve the asynchronous writing problem, making asynchronous writing clearly.</em></strong></p>\n<p>Let’s talk about promises first. In MDN, promises are defined as follows:</p>\n<pre><code>The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.[1]</code></pre><p>Promise has three states: <b> Pending (waiting for asynchronous process execution to complete); Fulfilled or Resolved (successful); Rejected (failed) &lt;/ b&gt;.<br>The result of the asynchronous operation determines the current state, and other content cannot interfere with the Promise state. In addition, if the status of a Promise changes, it will not change again. For example, if you change from a Pending turn to Rejected, state will not return to Pending or become Fulfilled again. [2]</b></p>\n<p>The following shows a simple use of a Promise:</p>\n<pre><code>let p = new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            console.log(p);\n            resolve();\n        }, 2000); \n    });\n\n    p.then(() =&gt; {\n        console.log(p);\n        console.log(\"then....\");\n    }); </code></pre><p>The “then” method is equivalent to the callback function. According to the above code, it can be found that a function is passed after the Promise is created. The parameters of the function are two functions - Resolve and Reject, corresponding to Rejected and Resolved (Fulfilled) States. Now you can see at a glance. If the asynchronous execution is successful, you call “resolve()”, otherwise “reject()”. The above results are:</p>\n<p>After the program runs for two seconds, it prints the following：</p>\n<pre><code>Promise {&lt;pending&gt;}\nPromise {&lt;resolved&gt;: undefined}\nthen....</code></pre><p>It can be seen that if the asynchronous execution is successful and the Resolve function is called, the program will execute down to “then”, and from the two printed “p”s, we can see that the status of the Promise changes from Pending to Resolved.</p>\n<h4 id=\"So-how-do-you-use-asynchronous-results\"><a href=\"#So-how-do-you-use-asynchronous-results\" class=\"headerlink\" title=\"So how do you use asynchronous results?\"></a>So how do you use asynchronous results?</h4><p>Many times, the results produced by asynchronous are what we will use later, so if we use Promise to optimize asynchronous writing, like above, how do we use asynchronous results?</p>\n<p>In fact, the answer already appears in the above code. The second line of the above code results, There is an “undefined” value after “resolved”. This place is used to store asynchronous results. The code can be changed as follows:</p>\n<pre><code>let p = new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            console.log(p);\n            resolve(\"parameters...\"); // =======》Here you can pass parameters when executing resolve.\n        }, 2000); \n });\n\n p.then((res) =&gt; { // ======》You can pass a parameter here, such asres\n        console.log(p);\n        console.log(res);         \n        console.log(\"then....\");\n });</code></pre><p>The results are：</p>\n<pre><code>Promise {&lt;pending&gt;}\nPromise {&lt;resolved&gt;: \"parameters...\"}\nparameters...\nthen....</code></pre><p>Combining the above code and results, we can see that by passing the asynchronous result to the resolve method, after calling the then method, it can receive a parameter, which will point to the asynchronous result. This makes it possible to use asynchronous results.</p>\n<p>If you want to use the result of “reject” in the “then” function, it is also very simple. Pass a second callback function as a parameter, such as:</p>\n<pre><code>p.then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(\"then....\");\n }, (rej) =&gt; {\n        console.log(rej);\n });</code></pre><p>At a glance, I won’t go into details here.</p>\n<p>However, if we should call the “then” function for multiple times, two functions are passed in each function to handle the success and failure results, which is sometimes cumbersome. Therefore, if all steps are processed with errors or failures, but only one kind of information need to be given to the user (such as network request error), you can use the following methods:</p>\n<pre><code>p.then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(\"then....\");\n }).then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(\"then....\");\n }).then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(\"then....\");\n }).catch((rej) =&gt; {\n     console.log(\"fail...\");\n })</code></pre><p>If you want to implement the previous scenario that requires multiple callbacks, the code is as follows:</p>\n<pre><code>let po = new Promise((resolve, reject) =&gt; {\n    resolve(1);\n});\n\npo.then((res) =&gt; {\n   console.log(res);\n   return 2;\n}).then((res) =&gt; {\n   console.log(res);\n   return 3;\n}).then((res) =&gt; {\n   console.log(res);\n   return 4;\n}).then((res) =&gt; {\n   console.log(res);\n})</code></pre><p>Result is：</p>\n<pre><code>1\n2\n3\n4</code></pre><p>Obviously, the result returned by the “then” method can be obtained by the “then” method behind. But why is it available? We can assign a value to the result of the “then” method and print it. The code is:</p>\n<pre><code>let po = new Promise((resolve, reject) =&gt; {\n     resolve(1);\n });\n\n let pt = po.then((res) =&gt; {\n     console.log(res);\n     return \"pt\";\n })\n\n console.log(pt);</code></pre><p> Result is：</p>\n<pre><code>Promise {&lt;pending&gt;}__proto__: Promise[[PromiseStatus]]: \"resolved\"[[PromiseValue]]: \"pt\"\n1</code></pre><p>After the above code is run, the last line of “pt” is printed. Because of the asynchronous reason, then the number “1” of the resolve passed into the “then” function is printed. The expansion result of “pt” can be seen that the “then” method will return a Promise object to us, and from the above results, it is seen that a Promise object with “resolved” state is returned.</p>\n<p>Now that we all understand the use of promises, the example of moving blocks above can be rewritten as:</p>\n<pre><code>function move(ele, dir, dist) {\n    let curPos = parseFloat(getComputedStyle(ele)[dir]);\n    let speed = (dist - curPos) /Math.abs(curPos - dist);\n\n    return new Promise((resolve, reject) =&gt; {\n        clearInterval(ele.timer);\n        ele.timer = setInterval(() =&gt; {\n        if (Math.abs(curPos - dist) &lt;= 0) {\n                clearInterval(ele.timer); \n                resolve();\n        } else {\n                curPos += speed;\n                ele.style[dir] = curPos + \"px\";\n        }\n        }, 20);\n    })\n}\n\nlet box = document.querySelector(\"#box\");\n\nmove(box, \"left\", 100).then(() =&gt; {\n    return move(box, \"top\", 100);\n}).then(() =&gt; {\n    return move(box, \"left\", 0);\n}).then(() =&gt; {\n    return move(box, \"top\", 0);\n})</code></pre><p>The result is the same as the above result. But readability and code scalability have been significantly improved.</p>\n<h4 id=\"Promise-“all”-function\"><a href=\"#Promise-“all”-function\" class=\"headerlink\" title=\"Promise “all” function\"></a>Promise “all” function</h4><p>After talking about the use of Promise and the use of “catch” and “then”, later, we will talk about another common method, Promise “all” function.</p>\n<p>MDN’s description of the “all” method is:</p>\n<pre><code>The Promise.all() method returns a single Promise that fulfills when all of the promises passed as an iterable have been fulfilled or when the iterable contains no promises. It rejects with the reason of the first promise that rejects.[3] </code></pre><p>For example, three different Promise objects are created, and the “all” method is called to execute the three Promise objects. If all three Promise objects are in the “resolved” state, then, can be executed downwards.</p>\n<p>For example:</p>\n<pre><code> let p1 = new Promise((resolve, reject) =&gt; {\n     console.log(1);\n     resolve();\n });\n\n\nlet p2 = new Promise((resolve, reject) =&gt; {\n     console.log(2);\n     resolve();\n });\n\n let p3 = new Promise((resolve, reject) =&gt; {\n     console.log(3);\n     resolve();\n });\n\n Promise.all([p1, p2, p3]).then(() =&gt;{\n     console.log(4);\n })</code></pre><p>Result:</p>\n<pre><code>1\n2\n3\n4</code></pre><p>If the execution status of any Promise object is rejected. You need to use catch method to catch errors in “then” or at the end of the code, otherwise an error will be reported.</p>\n<h3 id=\"Promise-“race”-function\"><a href=\"#Promise-“race”-function\" class=\"headerlink\" title=\"Promise “race” function\"></a>Promise “race” function</h3><p>This method is exactly the opposite of the all method. The all method is executed. And after all execution is complete, the following content is executed. As the name of the race method implies, when one of the executions of Promise objects ends, the following method starts to execute. code show as below:</p>\n<pre><code> let p1 = new Promise((resolve, reject) =&gt; {\n     setTimeout(() =&gt; {\n        console.log(1);\n        resolve();\n     }, 2000);\n });\n\n\nlet p2 = new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n        console.log(2);\n        resolve();\n     }, 1000);\n });\n\n let p3 = new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n        console.log(3);\n        resolve();\n     }, 5000);\n });\n\n Promise.race([p1, p2, p3]).then(() =&gt;{\n     console.log(4);\n }).catch(() =&gt; {\n     console.log(\"err\");\n });</code></pre><p>结果是：</p>\n<pre><code>2\n4\n1\n3</code></pre><p>In the above code, we set the execution time of “p1” to 2s, “p2” to 1s, and “p3” to 5s. As can be seen from the results, after the execution of “p1”, the following “then” method is directly executed, so the printing order is 2, 4 and the last two will finish later.</p>\n<h3 id=\"Async-and-Await\"><a href=\"#Async-and-Await\" class=\"headerlink\" title=\"Async and Await\"></a>Async and Await</h3><p>Sometimes when using the series of Promise methods, I still feel that the readability is general and the code scalability is limited. At this time, you can use Async and Await in combination with Promise. The sample code is as follows:</p>\n<pre><code>async function fn () {\n    let p1 = await new Promise((resolve) =&gt; {\n        console.log(1);\n        resolve(2);\n    });\n\n    let p2 = await new Promise((resolve) =&gt; {\n        console.log(p1);\n        resolve(3);\n    });\n\n    let p3 = await new Promise((resolve) =&gt; {\n        console.log(p2);\n        resolve(4);\n    });\n    console.log(p3);\n}\n\nfn();\n\nResult is：\n1\n2\n3\n4</code></pre><p>Async and Await further simplify the amount of code, optimize the writing, and are by far it is the most commonly used asynchronous writing.</p>\n<p>Note:</p>\n<ol>\n<li>“Await” is followed by a method that returns a Promise object or creates a new Promise object.</li>\n<li>“Await” must be placed in the function marked by “Async”.</li>\n<li>If you need to catch an exception, you can use “try {} catch (exception) {}” to write “await” into the code block after “try”.</li>\n<li>The “Async” function returns a Promise, and the status is “resolved”.</li>\n<li>“Await” can accept non-Promise object as the result of an await expression. But no matter what is behind await, it will block the execution of the internal code of the “async” function. If there is an external code at this time, the external code is executed first, and then it returns to the internal execution.</li>\n<li>If the code in async is synchronous, then it executes synchronously.</li>\n</ol>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>Promise is almost finished, and also briefly talked about Async and Await. It feels that the most important part is to know how to use them. As for Generator, I have never heard of it before, and I feel that it is less used, so I’ll look for a chance to talk about it later.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>\n<p>[2] <a href=\"https://www.jianshu.com/p/1ab01ee4102a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1ab01ee4102a</a></p>\n<p>[3] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<center> <h1>ES6 Summary #2</h1> </center>\n<center> <h2> <font color=\"lightgray\">Asynchronous and synchronous</font> </h2> </center>\n\n<h3 id=\"Asynchronous-and-synchronous-are-a-message-notification-mechanism\"><a href=\"#Asynchronous-and-synchronous-are-a-message-notification-mechanism\" class=\"headerlink\" title=\"*Asynchronous and synchronous are a message notification mechanism.*\"></a><strong>*<u>Asynchronous and synchronous are a message notification mechanism.</u>*</strong></h3><h2 id=\"What-is-Asynchronous？\"><a href=\"#What-is-Asynchronous？\" class=\"headerlink\" title=\"What is Asynchronous？\"></a>What is Asynchronous？</h2><h3 id=\"Asynchronous-non-blocking：\"><a href=\"#Asynchronous-non-blocking：\" class=\"headerlink\" title=\"Asynchronous non-blocking：\"></a>Asynchronous non-blocking：</h3><pre><code>For example: A calls B, while B processes, A continues to execute. The processing of B ends, the result is returned, and A is executed again with the result of B. A does not have to wait for the end of B&#39;s execution during this period.</code></pre><h3 id=\"Synchronous-blocking：\"><a href=\"#Synchronous-blocking：\" class=\"headerlink\" title=\"Synchronous blocking：\"></a>Synchronous blocking：</h3><pre><code>For example: A calls B, and B returns the result to A after processing, and A continues to execute. A waits for the end of B&#39;s execution during this period. The execution of normal code is performed line by line, which is the synchronization mechanism.</code></pre><h3 id=\"The-most-basic-way-to-achieve-asynchronous-Using-timers\"><a href=\"#The-most-basic-way-to-achieve-asynchronous-Using-timers\" class=\"headerlink\" title=\"The most basic way to achieve asynchronous: Using timers\"></a>The most basic way to achieve asynchronous: <strong><em>Using timers</em></strong></h3><pre><code>function move(ele, dir, dist) {\n    let curPos = parseFloat(getComputedStyle(ele)[dir]);\n    let speed = (dist - curPos) /Math.abs(curPos - dist);\n    clearInterval(ele.timer);\n    console.log(&quot;start moving...&quot;);\n    ele.timer = setInterval(() =&gt; {\n       if (Math.abs(curPos - dist) &lt;= 0) {\n            clearInterval(ele.timer);\n            console.log(&quot;finish moving...&quot;);\n       } else {\n            curPos += speed;\n            ele.style[dir] = curPos + &quot;px&quot;;\n       }\n    }, 20);\n    console.log(&quot;printing....&quot;);\n}\n\nlet box = document.querySelector(&quot;#box&quot;);\n\nmove(box, &quot;left&quot;, 100);</code></pre><p>The result is：</p>\n<p><img src=\"https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result1.gif\" alt=\"Code Result\"></p>\n<p>The printing result is：</p>\n<p><img src=\"https://blog-imgs-1253907084.cos.ap-beijing.myqcloud.com/code-result2.png\" alt=\"Code Printing Result\"></p>\n<p>It can be seen from the results that “printing…” is printed before the end of the block movement, and it is not executed sequentially as in a regular program. This is the most basic asynchronous implementation.</p>\n<h3 id=\"Need-more-operation-after-asynchronous-funtion-end\"><a href=\"#Need-more-operation-after-asynchronous-funtion-end\" class=\"headerlink\" title=\"Need more operation after asynchronous funtion end?\"></a>Need more operation after asynchronous funtion end?</h3><p>There must be many solutions, but I think the better method is the callback function method, modify the above code：</p>\n<pre><code>function move(ele, dir, dist, callback) {\n    let curPos = parseFloat(getComputedStyle(ele)[dir]);\n    let speed = (dist - curPos) /Math.abs(curPos - dist);\n    clearInterval(ele.timer);\n    console.log(&quot;start moving...&quot;);\n    ele.timer = setInterval(() =&gt; {\n       if (Math.abs(curPos - dist) &lt;= 0) {\n            clearInterval(ele.timer);\n            console.log(&quot;finish moving...&quot;);\n            callback &amp;&amp; callback(); // ===&gt;First determine whether there is a callback, if it exists, then execute\n       } else {\n            curPos += speed;\n            ele.style[dir] = curPos + &quot;px&quot;;\n       }\n    }, 20);\n    console.log(&quot;printing....&quot;);\n\n}\n\nlet box = document.querySelector(&quot;#box&quot;);\n\nmove(box, &quot;left&quot;, 100, () =&gt; {\n    console.log(&quot;Run callback function&quot;);\n});</code></pre><p>The result is：</p>\n<pre><code>start moving...\nprinting....\nfinish moving...\nRun callback function</code></pre><p>This can well solve the problems that require asynchronous results or need to execute some code after asynchronous execution.</p>\n<h3 id=\"This-implementation-of-asynchronous-and-callback-issues-Callback-Hell\"><a href=\"#This-implementation-of-asynchronous-and-callback-issues-Callback-Hell\" class=\"headerlink\" title=\"This implementation of asynchronous and callback issues: Callback Hell\"></a>This implementation of asynchronous and callback issues: <strong><em>Callback Hell</em></strong></h3><p>The Callback Hell is to call call back function multiple times, resulting in too many layers, as follows:</p>\n<pre><code>move(box, &quot;left&quot;, 100,() =&gt; {\n    move(box, &quot;top&quot;, 100,() =&gt; {\n        move(box, &quot;left&quot;, -100,() =&gt; {\n            move(box, &quot;top&quot;, -100,() =&gt; {\n                console.log(&quot;finish...&quot;);\n            });\n        });\n    });\n});</code></pre><p>The layer of above code is too deep, which is not conducive to code reuse, maintainability, and readability.</p>\n<h2 id=\"Callback-Hell-Solution\"><a href=\"#Callback-Hell-Solution\" class=\"headerlink\" title=\"Callback Hell Solution\"></a>Callback Hell Solution</h2><p>There are three solutions, namely using <strong>Promise</strong>, using <strong>Async and Await</strong>, and using <strong>Generator</strong> function. I will talk about the Promise.</p>\n<h3 id=\"Promise-concept-and-usage\"><a href=\"#Promise-concept-and-usage\" class=\"headerlink\" title=\"Promise concept and usage\"></a>Promise concept and usage</h3><p><strong><em>Promises do not solve the asynchronous problem itself, but solve the asynchronous writing problem, making asynchronous writing clearly.</em></strong></p>\n<p>Let’s talk about promises first. In MDN, promises are defined as follows:</p>\n<pre><code>The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.[1]</code></pre><p>Promise has three states: <b> Pending (waiting for asynchronous process execution to complete); Fulfilled or Resolved (successful); Rejected (failed) &lt;/ b&gt;.<br>The result of the asynchronous operation determines the current state, and other content cannot interfere with the Promise state. In addition, if the status of a Promise changes, it will not change again. For example, if you change from a Pending turn to Rejected, state will not return to Pending or become Fulfilled again. [2]</b></p>\n<p>The following shows a simple use of a Promise:</p>\n<pre><code>let p = new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            console.log(p);\n            resolve();\n        }, 2000); \n    });\n\n    p.then(() =&gt; {\n        console.log(p);\n        console.log(&quot;then....&quot;);\n    }); </code></pre><p>The “then” method is equivalent to the callback function. According to the above code, it can be found that a function is passed after the Promise is created. The parameters of the function are two functions - Resolve and Reject, corresponding to Rejected and Resolved (Fulfilled) States. Now you can see at a glance. If the asynchronous execution is successful, you call “resolve()”, otherwise “reject()”. The above results are:</p>\n<p>After the program runs for two seconds, it prints the following：</p>\n<pre><code>Promise {&lt;pending&gt;}\nPromise {&lt;resolved&gt;: undefined}\nthen....</code></pre><p>It can be seen that if the asynchronous execution is successful and the Resolve function is called, the program will execute down to “then”, and from the two printed “p”s, we can see that the status of the Promise changes from Pending to Resolved.</p>\n<h4 id=\"So-how-do-you-use-asynchronous-results\"><a href=\"#So-how-do-you-use-asynchronous-results\" class=\"headerlink\" title=\"So how do you use asynchronous results?\"></a>So how do you use asynchronous results?</h4><p>Many times, the results produced by asynchronous are what we will use later, so if we use Promise to optimize asynchronous writing, like above, how do we use asynchronous results?</p>\n<p>In fact, the answer already appears in the above code. The second line of the above code results, There is an “undefined” value after “resolved”. This place is used to store asynchronous results. The code can be changed as follows:</p>\n<pre><code>let p = new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            console.log(p);\n            resolve(&quot;parameters...&quot;); // =======》Here you can pass parameters when executing resolve.\n        }, 2000); \n });\n\n p.then((res) =&gt; { // ======》You can pass a parameter here, such asres\n        console.log(p);\n        console.log(res);         \n        console.log(&quot;then....&quot;);\n });</code></pre><p>The results are：</p>\n<pre><code>Promise {&lt;pending&gt;}\nPromise {&lt;resolved&gt;: &quot;parameters...&quot;}\nparameters...\nthen....</code></pre><p>Combining the above code and results, we can see that by passing the asynchronous result to the resolve method, after calling the then method, it can receive a parameter, which will point to the asynchronous result. This makes it possible to use asynchronous results.</p>\n<p>If you want to use the result of “reject” in the “then” function, it is also very simple. Pass a second callback function as a parameter, such as:</p>\n<pre><code>p.then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(&quot;then....&quot;);\n }, (rej) =&gt; {\n        console.log(rej);\n });</code></pre><p>At a glance, I won’t go into details here.</p>\n<p>However, if we should call the “then” function for multiple times, two functions are passed in each function to handle the success and failure results, which is sometimes cumbersome. Therefore, if all steps are processed with errors or failures, but only one kind of information need to be given to the user (such as network request error), you can use the following methods:</p>\n<pre><code>p.then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(&quot;then....&quot;);\n }).then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(&quot;then....&quot;);\n }).then((res) =&gt; {\n        console.log(p);\n        console.log(res);\n        console.log(&quot;then....&quot;);\n }).catch((rej) =&gt; {\n     console.log(&quot;fail...&quot;);\n })</code></pre><p>If you want to implement the previous scenario that requires multiple callbacks, the code is as follows:</p>\n<pre><code>let po = new Promise((resolve, reject) =&gt; {\n    resolve(1);\n});\n\npo.then((res) =&gt; {\n   console.log(res);\n   return 2;\n}).then((res) =&gt; {\n   console.log(res);\n   return 3;\n}).then((res) =&gt; {\n   console.log(res);\n   return 4;\n}).then((res) =&gt; {\n   console.log(res);\n})</code></pre><p>Result is：</p>\n<pre><code>1\n2\n3\n4</code></pre><p>Obviously, the result returned by the “then” method can be obtained by the “then” method behind. But why is it available? We can assign a value to the result of the “then” method and print it. The code is:</p>\n<pre><code>let po = new Promise((resolve, reject) =&gt; {\n     resolve(1);\n });\n\n let pt = po.then((res) =&gt; {\n     console.log(res);\n     return &quot;pt&quot;;\n })\n\n console.log(pt);</code></pre><p> Result is：</p>\n<pre><code>Promise {&lt;pending&gt;}__proto__: Promise[[PromiseStatus]]: &quot;resolved&quot;[[PromiseValue]]: &quot;pt&quot;\n1</code></pre><p>After the above code is run, the last line of “pt” is printed. Because of the asynchronous reason, then the number “1” of the resolve passed into the “then” function is printed. The expansion result of “pt” can be seen that the “then” method will return a Promise object to us, and from the above results, it is seen that a Promise object with “resolved” state is returned.</p>\n<p>Now that we all understand the use of promises, the example of moving blocks above can be rewritten as:</p>\n<pre><code>function move(ele, dir, dist) {\n    let curPos = parseFloat(getComputedStyle(ele)[dir]);\n    let speed = (dist - curPos) /Math.abs(curPos - dist);\n\n    return new Promise((resolve, reject) =&gt; {\n        clearInterval(ele.timer);\n        ele.timer = setInterval(() =&gt; {\n        if (Math.abs(curPos - dist) &lt;= 0) {\n                clearInterval(ele.timer); \n                resolve();\n        } else {\n                curPos += speed;\n                ele.style[dir] = curPos + &quot;px&quot;;\n        }\n        }, 20);\n    })\n}\n\nlet box = document.querySelector(&quot;#box&quot;);\n\nmove(box, &quot;left&quot;, 100).then(() =&gt; {\n    return move(box, &quot;top&quot;, 100);\n}).then(() =&gt; {\n    return move(box, &quot;left&quot;, 0);\n}).then(() =&gt; {\n    return move(box, &quot;top&quot;, 0);\n})</code></pre><p>The result is the same as the above result. But readability and code scalability have been significantly improved.</p>\n<h4 id=\"Promise-“all”-function\"><a href=\"#Promise-“all”-function\" class=\"headerlink\" title=\"Promise “all” function\"></a>Promise “all” function</h4><p>After talking about the use of Promise and the use of “catch” and “then”, later, we will talk about another common method, Promise “all” function.</p>\n<p>MDN’s description of the “all” method is:</p>\n<pre><code>The Promise.all() method returns a single Promise that fulfills when all of the promises passed as an iterable have been fulfilled or when the iterable contains no promises. It rejects with the reason of the first promise that rejects.[3] </code></pre><p>For example, three different Promise objects are created, and the “all” method is called to execute the three Promise objects. If all three Promise objects are in the “resolved” state, then, can be executed downwards.</p>\n<p>For example:</p>\n<pre><code> let p1 = new Promise((resolve, reject) =&gt; {\n     console.log(1);\n     resolve();\n });\n\n\nlet p2 = new Promise((resolve, reject) =&gt; {\n     console.log(2);\n     resolve();\n });\n\n let p3 = new Promise((resolve, reject) =&gt; {\n     console.log(3);\n     resolve();\n });\n\n Promise.all([p1, p2, p3]).then(() =&gt;{\n     console.log(4);\n })</code></pre><p>Result:</p>\n<pre><code>1\n2\n3\n4</code></pre><p>If the execution status of any Promise object is rejected. You need to use catch method to catch errors in “then” or at the end of the code, otherwise an error will be reported.</p>\n<h3 id=\"Promise-“race”-function\"><a href=\"#Promise-“race”-function\" class=\"headerlink\" title=\"Promise “race” function\"></a>Promise “race” function</h3><p>This method is exactly the opposite of the all method. The all method is executed. And after all execution is complete, the following content is executed. As the name of the race method implies, when one of the executions of Promise objects ends, the following method starts to execute. code show as below:</p>\n<pre><code> let p1 = new Promise((resolve, reject) =&gt; {\n     setTimeout(() =&gt; {\n        console.log(1);\n        resolve();\n     }, 2000);\n });\n\n\nlet p2 = new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n        console.log(2);\n        resolve();\n     }, 1000);\n });\n\n let p3 = new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n        console.log(3);\n        resolve();\n     }, 5000);\n });\n\n Promise.race([p1, p2, p3]).then(() =&gt;{\n     console.log(4);\n }).catch(() =&gt; {\n     console.log(&quot;err&quot;);\n });</code></pre><p>结果是：</p>\n<pre><code>2\n4\n1\n3</code></pre><p>In the above code, we set the execution time of “p1” to 2s, “p2” to 1s, and “p3” to 5s. As can be seen from the results, after the execution of “p1”, the following “then” method is directly executed, so the printing order is 2, 4 and the last two will finish later.</p>\n<h3 id=\"Async-and-Await\"><a href=\"#Async-and-Await\" class=\"headerlink\" title=\"Async and Await\"></a>Async and Await</h3><p>Sometimes when using the series of Promise methods, I still feel that the readability is general and the code scalability is limited. At this time, you can use Async and Await in combination with Promise. The sample code is as follows:</p>\n<pre><code>async function fn () {\n    let p1 = await new Promise((resolve) =&gt; {\n        console.log(1);\n        resolve(2);\n    });\n\n    let p2 = await new Promise((resolve) =&gt; {\n        console.log(p1);\n        resolve(3);\n    });\n\n    let p3 = await new Promise((resolve) =&gt; {\n        console.log(p2);\n        resolve(4);\n    });\n    console.log(p3);\n}\n\nfn();\n\nResult is：\n1\n2\n3\n4</code></pre><p>Async and Await further simplify the amount of code, optimize the writing, and are by far it is the most commonly used asynchronous writing.</p>\n<p>Note:</p>\n<ol>\n<li>“Await” is followed by a method that returns a Promise object or creates a new Promise object.</li>\n<li>“Await” must be placed in the function marked by “Async”.</li>\n<li>If you need to catch an exception, you can use “try {} catch (exception) {}” to write “await” into the code block after “try”.</li>\n<li>The “Async” function returns a Promise, and the status is “resolved”.</li>\n<li>“Await” can accept non-Promise object as the result of an await expression. But no matter what is behind await, it will block the execution of the internal code of the “async” function. If there is an external code at this time, the external code is executed first, and then it returns to the internal execution.</li>\n<li>If the code in async is synchronous, then it executes synchronously.</li>\n</ol>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>Promise is almost finished, and also briefly talked about Async and Await. It feels that the most important part is to know how to use them. As for Generator, I have never heard of it before, and I feel that it is less used, so I’ll look for a chance to talk about it later.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p>[1] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>\n<p>[2] <a href=\"https://www.jianshu.com/p/1ab01ee4102a\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1ab01ee4102a</a></p>\n<p>[3] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all</a></p>\n"},{"title":"My First Blog - New Beginning","date":"2019-11-23T11:41:36.000Z","comments":1,"_content":"\n<center> <h1> My First Blog</h1></center>\n<center> <h2> <font color=lightgray>New Beginning</font></h2></center>\n\n<font size=4>\nHello I am Kuncheng Li. I graduated from USC (University of Southern California) at May 10th, 2019. My major is Computer Science. I am still seeking full time Software Engineer position in the US now. \n\n\nI have learned Computer Science for more than five years during undergraduate study and master study. I took my undergraduate degree in the UK. My university is University of Essex. It located in the oldest town in UK - Colchester. \n\nDuring these a few years. I learned a lot of different kinds of technical stacks. For example, Java, Spring, Python, Django, HTML, CSS, JavaScript, Vue.js, React.js, Angular, MySQL, Redis and other kind of technologies which are belong to other technical area. My knowledge is widely enough. But I need to find out my future career direction for those technologies. And I need to learn the relevant technologies deeply.\n\nAs a result, I built and deployed this personal blog. I hope to record that kownledge points I need to remember, mistakes I have met during developing projects and my personal understanding of the technologies I have learned. \n\nMy current plan is that to revise knowledge about Java, record the key points, errors occured during the learning period and so on. \n\nIn the future, I will revise more and more technologies which I was learned before. \n\nThank you.\n\nKuncheng Li\n</font>\n\n\n\n","source":"_posts/My-First-Blog-New-Beginning.md","raw":"---\ntitle: My First Blog - New Beginning\ndate: 2019-11-23 03:41:36\ntags: Trival Talks\ncomments: true\ncategories: Some Feelings\n---\n\n<center> <h1> My First Blog</h1></center>\n<center> <h2> <font color=lightgray>New Beginning</font></h2></center>\n\n<font size=4>\nHello I am Kuncheng Li. I graduated from USC (University of Southern California) at May 10th, 2019. My major is Computer Science. I am still seeking full time Software Engineer position in the US now. \n\n\nI have learned Computer Science for more than five years during undergraduate study and master study. I took my undergraduate degree in the UK. My university is University of Essex. It located in the oldest town in UK - Colchester. \n\nDuring these a few years. I learned a lot of different kinds of technical stacks. For example, Java, Spring, Python, Django, HTML, CSS, JavaScript, Vue.js, React.js, Angular, MySQL, Redis and other kind of technologies which are belong to other technical area. My knowledge is widely enough. But I need to find out my future career direction for those technologies. And I need to learn the relevant technologies deeply.\n\nAs a result, I built and deployed this personal blog. I hope to record that kownledge points I need to remember, mistakes I have met during developing projects and my personal understanding of the technologies I have learned. \n\nMy current plan is that to revise knowledge about Java, record the key points, errors occured during the learning period and so on. \n\nIn the future, I will revise more and more technologies which I was learned before. \n\nThank you.\n\nKuncheng Li\n</font>\n\n\n\n","slug":"My-First-Blog-New-Beginning","published":1,"updated":"2019-11-23T11:46:55.718Z","layout":"post","photos":[],"link":"","_id":"ck5xn1y3a0006ynaaaluu7065","content":"<center> <h1> My First Blog</h1></center>\n<center> <h2> <font color=\"lightgray\">New Beginning</font></h2></center>\n\n<font size=\"4\">\nHello I am Kuncheng Li. I graduated from USC (University of Southern California) at May 10th, 2019. My major is Computer Science. I am still seeking full time Software Engineer position in the US now. \n\n\n<p>I have learned Computer Science for more than five years during undergraduate study and master study. I took my undergraduate degree in the UK. My university is University of Essex. It located in the oldest town in UK - Colchester. </p>\n<p>During these a few years. I learned a lot of different kinds of technical stacks. For example, Java, Spring, Python, Django, HTML, CSS, JavaScript, Vue.js, React.js, Angular, MySQL, Redis and other kind of technologies which are belong to other technical area. My knowledge is widely enough. But I need to find out my future career direction for those technologies. And I need to learn the relevant technologies deeply.</p>\n<p>As a result, I built and deployed this personal blog. I hope to record that kownledge points I need to remember, mistakes I have met during developing projects and my personal understanding of the technologies I have learned. </p>\n<p>My current plan is that to revise knowledge about Java, record the key points, errors occured during the learning period and so on. </p>\n<p>In the future, I will revise more and more technologies which I was learned before. </p>\n<p>Thank you.</p>\n<p>Kuncheng Li<br></p></font><p></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{}},"excerpt":"","more":"<center> <h1> My First Blog</h1></center>\n<center> <h2> <font color=\"lightgray\">New Beginning</font></h2></center>\n\n<font size=\"4\">\nHello I am Kuncheng Li. I graduated from USC (University of Southern California) at May 10th, 2019. My major is Computer Science. I am still seeking full time Software Engineer position in the US now. \n\n\n<p>I have learned Computer Science for more than five years during undergraduate study and master study. I took my undergraduate degree in the UK. My university is University of Essex. It located in the oldest town in UK - Colchester. </p>\n<p>During these a few years. I learned a lot of different kinds of technical stacks. For example, Java, Spring, Python, Django, HTML, CSS, JavaScript, Vue.js, React.js, Angular, MySQL, Redis and other kind of technologies which are belong to other technical area. My knowledge is widely enough. But I need to find out my future career direction for those technologies. And I need to learn the relevant technologies deeply.</p>\n<p>As a result, I built and deployed this personal blog. I hope to record that kownledge points I need to remember, mistakes I have met during developing projects and my personal understanding of the technologies I have learned. </p>\n<p>My current plan is that to revise knowledge about Java, record the key points, errors occured during the learning period and so on. </p>\n<p>In the future, I will revise more and more technologies which I was learned before. </p>\n<p>Thank you.</p>\n<p>Kuncheng Li<br></p></font><p></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck5xn1y2s0000ynaaax5m80lz","category_id":"ck5xn1y370004ynaa2yyug2n6","_id":"ck5xn1y3q000cynaahznz9tdk"},{"post_id":"ck5xn1y340002ynaa3ay4bhv1","category_id":"ck5xn1y370004ynaa2yyug2n6","_id":"ck5xn1y3r000eynaacxsy19j9"},{"post_id":"ck5xn1y3a0006ynaaaluu7065","category_id":"ck5xn1y3k000bynaabxpzfobm","_id":"ck5xn1y3s000gynaab3iic03j"}],"PostTag":[{"post_id":"ck5xn1y2s0000ynaaax5m80lz","tag_id":"ck5xn1y390005ynaa9we62hhz","_id":"ck5xn1y3t000iynaa2mne4l9w"},{"post_id":"ck5xn1y2s0000ynaaax5m80lz","tag_id":"ck5xn1y3f000aynaa82v1c7p8","_id":"ck5xn1y3t000jynaa0yi90khn"},{"post_id":"ck5xn1y2s0000ynaaax5m80lz","tag_id":"ck5xn1y3q000dynaa254p2lta","_id":"ck5xn1y3t000lynaabxa822hy"},{"post_id":"ck5xn1y2s0000ynaaax5m80lz","tag_id":"ck5xn1y3r000fynaa3wpt8yao","_id":"ck5xn1y3u000mynaa5zlaf1qv"},{"post_id":"ck5xn1y340002ynaa3ay4bhv1","tag_id":"ck5xn1y390005ynaa9we62hhz","_id":"ck5xn1y3v000qynaa3w1u0g4z"},{"post_id":"ck5xn1y340002ynaa3ay4bhv1","tag_id":"ck5xn1y3f000aynaa82v1c7p8","_id":"ck5xn1y3v000rynaa5qb3g6ln"},{"post_id":"ck5xn1y340002ynaa3ay4bhv1","tag_id":"ck5xn1y3q000dynaa254p2lta","_id":"ck5xn1y3w000synaa6ypd47pp"},{"post_id":"ck5xn1y340002ynaa3ay4bhv1","tag_id":"ck5xn1y3r000fynaa3wpt8yao","_id":"ck5xn1y3w000tynaabpqd62a0"},{"post_id":"ck5xn1y3a0006ynaaaluu7065","tag_id":"ck5xn1y3v000pynaaef5bdhts","_id":"ck5xn1y3w000uynaa4sjyhp99"}],"Tag":[{"name":"JavaScript","_id":"ck5xn1y390005ynaa9we62hhz"},{"name":"ECMAScript 6","_id":"ck5xn1y3f000aynaa82v1c7p8"},{"name":"Front End Development","_id":"ck5xn1y3q000dynaa254p2lta"},{"name":"Web Development","_id":"ck5xn1y3r000fynaa3wpt8yao"},{"name":"Trival Talks","_id":"ck5xn1y3v000pynaaef5bdhts"}]}}